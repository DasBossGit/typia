"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[446],{9595:function(e,t,r){r.d(t,{Bl5:function(){return HashSet},FcI:function(){return sleep_for},JSI:function(){return is_node},LHW:function(){return RuntimeError},Vk4:function(){return ConditionVariable},Zj_:function(){return DomainError},eGA:function(){return Singleton},fI3:function(){return sleep_until},sOq:function(){return Pair},zNR:function(){return HashMap}});let ForOfAdaptor=class ForOfAdaptor{constructor(e,t){this.it_=e,this.last_=t}next(){if(this.it_.equals(this.last_))return{done:!0,value:void 0};{let e=this.it_;return this.it_=this.it_.next(),{done:!1,value:e.value}}}[Symbol.iterator](){return this}};let Container=class Container{empty(){return 0===this.size()}rbegin(){return this.end().reverse()}rend(){return this.begin().reverse()}[Symbol.iterator](){return new ForOfAdaptor(this.begin(),this.end())}toJSON(){let e=[];for(let t of this)e.push(t);return e}};let NativeArrayIterator=class NativeArrayIterator{constructor(e,t){this.data_=e,this.index_=t}index(){return this.index_}get value(){return this.data_[this.index_]}prev(){return--this.index_,this}next(){return++this.index_,this}advance(e){return this.index_+=e,this}equals(e){return this.data_===e.data_&&this.index_===e.index_}swap(e){[this.data_,e.data_]=[e.data_,this.data_],[this.index_,e.index_]=[e.index_,this.index_]}};let SetContainer=class SetContainer extends Container{constructor(e){super(),this.data_=e(this)}assign(e,t){this.clear(),this.insert(e,t)}clear(){this.data_.clear()}begin(){return this.data_.begin()}end(){return this.data_.end()}has(e){return!this.find(e).equals(this.end())}size(){return this.data_.size()}push(...e){if(0===e.length)return this.size();let t=new NativeArrayIterator(e,0),r=new NativeArrayIterator(e,e.length);return this._Insert_by_range(t,r),this.size()}insert(...e){return 1===e.length?this._Insert_by_key(e[0]):e[0].next instanceof Function&&e[1].next instanceof Function?this._Insert_by_range(e[0],e[1]):this._Insert_by_hint(e[0],e[1])}erase(...e){return 1!==e.length||e[0]instanceof this.end().constructor&&e[0].source()===this?1===e.length?this._Erase_by_range(e[0]):this._Erase_by_range(e[0],e[1]):this._Erase_by_val(e[0])}_Erase_by_range(e,t=e.next()){let r=this.data_.erase(e,t);return this._Handle_erase(e,t),r}};let Exception=class Exception extends Error{constructor(e){super(e);let t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t}get name(){return this.constructor.name}what(){return this.message}toJSON(){return{name:this.name,message:this.message,stack:this.stack}}};let LogicError=class LogicError extends Exception{constructor(e){super(e)}};let InvalidArgument=class InvalidArgument extends LogicError{constructor(e){super(e)}};let OutOfRange=class OutOfRange extends LogicError{constructor(e){super(e)}};!function(e){function get_class_name(e){if("string"==typeof e)return e;let t=e.constructor.name;return e.constructor.__MODULE&&(t=`${e.constructor.__MODULE}.${t}`),`std.${t}`}e.get_class_name=get_class_name,e.empty=function(e,t){return new OutOfRange(`Error on ${get_class_name(e)}.${t}(): it's empty container.`)},e.negative_index=function(e,t,r){return new OutOfRange(`Error on ${get_class_name(e)}.${t}(): parametric index is negative -> (index = ${r}).`)},e.excessive_index=function(e,t,r,n){return new OutOfRange(`Error on ${get_class_name(e)}.${t}(): parametric index is equal or greater than size -> (index = ${r}, size: ${n}).`)},e.not_my_iterator=function(e,t){return new InvalidArgument(`Error on ${get_class_name(e)}.${t}(): parametric iterator is not this container's own.`)},e.erased_iterator=function(e,t){return new InvalidArgument(`Error on ${get_class_name(e)}.${t}(): parametric iterator, it already has been erased.`)},e.negative_iterator=function(e,t,r){return new OutOfRange(`Error on ${get_class_name(e)}.${t}(): parametric iterator is directing negative position -> (index = ${r}).`)},e.iterator_end_value=function(e,t="end"){let r=get_class_name(e);return new OutOfRange(`Error on ${r}.Iterator.value: cannot access to the ${r}.${t}().value.`)},e.key_nout_found=function(e,t,r){throw new OutOfRange(`Error on ${get_class_name(e)}.${t}(): unable to find the matched key -> ${r}`)}}(y||(y={}));let UniqueSet=class UniqueSet extends SetContainer{count(e){return this.find(e).equals(this.end())?0:1}insert(...e){return super.insert(...e)}_Insert_by_range(e,t){for(;!e.equals(t);e=e.next())this._Insert_by_key(e.value)}extract(e){return e instanceof this.end().constructor?this._Extract_by_iterator(e):this._Extract_by_val(e)}_Extract_by_val(e){let t=this.find(e);if(!0===t.equals(this.end()))throw y.key_nout_found(this,"extract",e);return this._Erase_by_range(t),e}_Extract_by_iterator(e){return!0===e.equals(this.end())||!1===this.has(e.value)?this.end():(this._Erase_by_range(e),e)}_Erase_by_val(e){let t=this.find(e);return!0===t.equals(this.end())?0:(this._Erase_by_range(t),1)}merge(e){for(let t=e.begin();!t.equals(e.end());)!1===this.has(t.value)?(this.insert(t.value),t=e.erase(t)):t=t.next()}};let MultiSet=class MultiSet extends SetContainer{insert(...e){return super.insert(...e)}_Erase_by_val(e){let t=this.find(e);if(!0===t.equals(this.end()))return 0;let r=t.next(),n=1;for(;!r.equals(this.end())&&this._Key_eq(e,r.value);)r=r.next(),++n;return this._Erase_by_range(t,r),n}merge(e){this.insert(e.begin(),e.end()),e.clear()}};let MapContainer=class MapContainer extends Container{constructor(e){super(),this.data_=e(this)}assign(e,t){this.clear(),this.insert(e,t)}clear(){this.data_.clear()}begin(){return this.data_.begin()}end(){return this.data_.end()}has(e){return!this.find(e).equals(this.end())}size(){return this.data_.size()}push(...e){let t=new NativeArrayIterator(e,0),r=new NativeArrayIterator(e,e.length);return this.insert(t,r),this.size()}insert(...e){return 1===e.length?this.emplace(e[0].first,e[0].second):e[0].next instanceof Function&&e[1].next instanceof Function?this._Insert_by_range(e[0],e[1]):this.emplace_hint(e[0],e[1].first,e[1].second)}erase(...e){return 1===e.length&&(e[0]instanceof this.end().constructor==!1||e[0].source()!==this)?this._Erase_by_key(e[0]):1===e.length?this._Erase_by_range(e[0]):this._Erase_by_range(e[0],e[1])}_Erase_by_range(e,t=e.next()){let r=this.data_.erase(e,t);return this._Handle_erase(e,t),r}};let UniqueMap=class UniqueMap extends MapContainer{count(e){return this.find(e).equals(this.end())?0:1}get(e){let t=this.find(e);if(!0===t.equals(this.end()))throw y.key_nout_found(this,"get",e);return t.second}take(e,t){let r=this.find(e);return r.equals(this.end())?this.emplace(e,t()).first.second:r.second}set(e,t){this.insert_or_assign(e,t)}insert(...e){return super.insert(...e)}_Insert_by_range(e,t){for(let r=e;!r.equals(t);r=r.next())this.emplace(r.value.first,r.value.second)}insert_or_assign(...e){return 2===e.length?this._Insert_or_assign_with_key_value(e[0],e[1]):3===e.length?this._Insert_or_assign_with_hint(e[0],e[1],e[2]):void 0}_Insert_or_assign_with_key_value(e,t){let r=this.emplace(e,t);return!1===r.second&&(r.first.second=t),r}_Insert_or_assign_with_hint(e,t,r){let n=this.emplace_hint(e,t,r);return n.second!==r&&(n.second=r),n}extract(e){return e instanceof this.end().constructor?this._Extract_by_iterator(e):this._Extract_by_key(e)}_Extract_by_key(e){let t=this.find(e);if(!0===t.equals(this.end()))throw y.key_nout_found(this,"extract",e);let r=t.value;return this._Erase_by_range(t),r}_Extract_by_iterator(e){return!0===e.equals(this.end())?this.end():(this._Erase_by_range(e),e)}_Erase_by_key(e){let t=this.find(e);return!0===t.equals(this.end())?0:(this._Erase_by_range(t),1)}merge(e){for(let t=e.begin();!t.equals(e.end());)!1===this.has(t.first)?(this.insert(t.value),t=e.erase(t)):t=t.next()}};let MultiMap=class MultiMap extends MapContainer{insert(...e){return super.insert(...e)}_Erase_by_key(e){let t=this.find(e);if(!0===t.equals(this.end()))return 0;let r=t.next(),n=1;for(;!r.equals(this.end())&&this._Key_eq(e,r.first);)r=r.next(),++n;return this._Erase_by_range(t,r),n}merge(e){this.insert(e.begin(),e.end()),e.clear()}};var n,s,i,a,u,_,o,l,c,h,d,f,p,g,v,m,b,y,x,k,w,q,$,I=Object.freeze({__proto__:null,Container,MapContainer,MultiMap,MultiSet,SetContainer,UniqueMap,UniqueSet});function is_node(){var e;return null===M&&(M="object"==typeof global&&null!==(e=global)&&"object"==typeof e.process&&null!==e.process&&"object"==typeof e.process.versions&&null!==e.process.versions&&void 0!==e.process.versions.node),M}(x||(x={})).construct=function(e,...t){let r,n;return t.length>=1&&t[0]instanceof Array?(r=()=>{let r=t[0];e.push(...r)},n=t.slice(1)):t.length>=2&&t[0].next instanceof Function&&t[1].next instanceof Function?(r=()=>{let r=t[0],n=t[1];e.assign(r,n)},n=t.slice(2)):(r=null,n=t),{ramda:r,tail:n}};let M=null;function _Get_root(){return null===S&&void 0===(S=is_node()?global:self).__s_iUID&&(S.__s_iUID=0),S}let S=null;function get_uid(e){if(e instanceof Object){if(!1===e.hasOwnProperty("__get_m_iUID")){let t=++_Get_root().__s_iUID;Object.defineProperty(e,"__get_m_iUID",{value:function(){return t}})}return e.__get_m_iUID()}return void 0===e?-1:0}function equal_to(e,t){return(e=e?e.valueOf():e,t=t?t.valueOf():t,e instanceof Object&&e.equals instanceof Function)?e.equals(t):e===t}function not_equal_to(e,t){return!equal_to(e,t)}function less(e,t){return(e=e.valueOf(),t=t.valueOf(),e instanceof Object)?e.less instanceof Function?e.less(t):get_uid(e)<get_uid(t):e<t}function less_equal(e,t){return less(e,t)||equal_to(e,t)}function hash(...e){let t=E;for(let n of e){n=n?n.valueOf():n;let s=typeof n;if("boolean"===s){var r;t=(t^(n?1:0))*z}else if("number"===s||"bigint"===s)t=_Hash_number(n,t);else if("string"===s)t=_Hash_string(n,t);else if(n instanceof Object&&n.hashCode instanceof Function){let r=n.hashCode();if(1===e.length)return r;t^=r,t*=z}else t=_Hash_number(get_uid(n),t)}return Math.abs(t)}function _Hash_number(e,t){return _Hash_string(e.toString(),t)}function _Hash_string(e,t){for(let r=0;r<e.length;++r)t^=e.charCodeAt(r),t*=z;return Math.abs(t)}(n=k||(k={})).construct=function(e,t,r,...n){let s=null,i=less;if(1===n.length&&n[0]instanceof t){let t=n[0];i=t.key_comp(),s=()=>{let r=t.begin(),n=t.end();e.assign(r,n)}}else{let t=x.construct(e,...n);s=t.ramda,t.tail.length>=1&&(i=t.tail[0])}r(i),null!==s&&s()},n.emplacable=function(e,t,r){let n=t.prev();return(n.equals(e.end())||e.value_comp()(n.value,r))&&(t.equals(e.end())||e.value_comp()(r,t.value))};let E=2166136261,z=16777619;let Pair=class Pair{constructor(e,t){this.first=e,this.second=t}equals(e){return equal_to(this.first,e.first)&&equal_to(this.second,e.second)}less(e){return!1===equal_to(this.first,e.first)?less(this.first,e.first):less(this.second,e.second)}hashCode(){return hash(this.first,this.second)}};let UniqueTreeSet=class UniqueTreeSet extends UniqueSet{find(e){let t=this.lower_bound(e);return!t.equals(this.end())&&this._Key_eq(e,t.value)?t:this.end()}equal_range(e){let t=this.lower_bound(e);return new Pair(t,!t.equals(this.end())&&this._Key_eq(e,t.value)?t.next():t)}value_comp(){return this.key_comp()}_Key_eq(e,t){return!this.key_comp()(e,t)&&!this.key_comp()(t,e)}_Insert_by_key(e){let t=this.lower_bound(e);return!t.equals(this.end())&&this._Key_eq(t.value,e)?new Pair(t,!1):(t=this.data_.insert(t,e),this._Handle_insert(t,t.next()),new Pair(t,!0))}_Insert_by_hint(e,t){let r=k.emplacable(this,e,t);if(!r)return this._Insert_by_key(t).first;{let r=this.data_.insert(e,t);return this._Handle_insert(r,r.next()),r}}};let RuntimeError=class RuntimeError extends Exception{constructor(e){super(e)}};let RangeError=class RangeError extends RuntimeError{constructor(e){super(e)}};let Repeater=class Repeater{constructor(e,t){this.index_=e,this.value_=t}index(){return this.index_}get value(){return this.value_}next(){return++this.index_,this}equals(e){return this.index_===e.index_}};let ArrayContainer=class ArrayContainer extends Container{begin(){return this.nth(0)}end(){return this.nth(this.size())}at(e){return this._At(e)}set(e,t){if(e<0)throw y.negative_index(this.source(),"at",e);if(e>=this.size())throw y.excessive_index(this.source(),"at",e,this.size());this._Set(e,t)}front(e){if(0==arguments.length)return this.at(0);this.set(0,e)}back(e){let t=this.size()-1;if(0==arguments.length)return this.at(t);this.set(t,e)}insert(e,...t){if(e._Get_array()!==this)throw y.not_my_iterator(this.source(),"insert");if(0>e.index())throw y.negative_iterator(this.source(),"insert",e.index());return e.index()>this.size()&&(e=this.end()),1===t.length?this._Insert_by_repeating_val(e,1,t[0]):2===t.length&&"number"==typeof t[0]?this._Insert_by_repeating_val(e,t[0],t[1]):this._Insert_by_range(e,t[0],t[1])}_Insert_by_repeating_val(e,t,r){let n=new Repeater(0,r),s=new Repeater(t);return this._Insert_by_range(e,n,s)}pop_back(){if(!0===this.empty())throw y.empty(this.source(),"pop_back");this._Pop_back()}erase(e,t=e.next()){if(e._Get_array()!==this||t._Get_array()!==this)throw y.not_my_iterator(this.source(),"erase");if(0>e.index())throw y.negative_iterator(this.source(),"erase",e.index());if(e.index()>t.index())throw new RangeError(`Error on ${y.get_class_name(this.source())}.erase(): first iterator has greater index than last -> (first = ${e.index()}, last = ${t.index()}).`);return e.index()>=this.size()?this.end():this._Erase_by_range(e,t)}};let VectorContainer=class VectorContainer extends ArrayContainer{constructor(){super()}assign(e,t){this.clear(),this.insert(this.end(),e,t)}clear(){this.data_.splice(0,this.data_.length)}resize(e){this.data_.length=e}size(){return this.data_.length}_At(e){return this.data_[e]}_Set(e,t){this.data_[e]=t}data(){return this.data_}[Symbol.iterator](){return this.data_[Symbol.iterator]()}push(...e){return this.data_.push(...e)}push_back(e){this.data_.push(e)}_Insert_by_range(e,t,r){if(e.index()>=this.size()){let e=this.size();for(;!t.equals(r);t=t.next())this.data_.push(t.value);return this.nth(e)}{let n=this.data_.splice(e.index());for(;!t.equals(r);t=t.next())this.data_.push(t.value);return this.data_.push(...n),e}}_Pop_back(){this.data_.pop()}_Erase_by_range(e,t){return e.index()>=this.size()?e:t.index()>=this.size()?(this.data_.splice(e.index()),this.end()):(this.data_.splice(e.index(),t.index()-e.index()),e)}equals(e){return this.data_===e.data_}swap(e){[this.data_,e.data_]=[e.data_,this.data_]}toJSON(){return this.data_}};let ArrayIteratorBase=class ArrayIteratorBase{constructor(e,t){this.array_=e,this.index_=t}_Get_array(){return this.array_}index(){return this.index_}get value(){return this.array_.at(this.index_)}set value(e){this.array_.set(this.index_,e)}prev(){return this.advance(-1)}next(){return this.advance(1)}advance(e){return this.array_.nth(this.index_+e)}equals(e){return equal_to(this.array_,e.array_)&&this.index_===e.index_}};let T=class{constructor(e){this.base_=e.prev()}source(){return this.base_.source()}base(){return this.base_.next()}get value(){return this.base_.value}prev(){return this._Create_neighbor(this.base().next())}next(){return this._Create_neighbor(this.base_)}equals(e){return this.base_.equals(e.base_)}};let ArrayReverseIteratorBase=class ArrayReverseIteratorBase extends T{advance(e){return this._Create_neighbor(this.base().advance(-e))}index(){return this.base_.index()}get value(){return this.base_.value}set value(e){this.base_.value=e}};let SetElementVector=class SetElementVector extends VectorContainer{constructor(e){super(),this.data_=[],this.associative_=e}nth(e){return new SetElementVector.Iterator(this,e)}static _Swap_associative(e,t){[e.associative_,t.associative_]=[t.associative_,e.associative_]}source(){return this.associative_}};function size(e){return e instanceof Array?e.length:e.size()}function distance(e,t){if(e.index instanceof Function)return function(e,t){let r=e.index(),n=t.index();return e.base instanceof Function?r-n:n-r}(e,t);let r=0;for(;!e.equals(t);e=e.next())++r;return r}function advance(e,t){let r;if(0===t)return e;if(e.advance instanceof Function)return e.advance(t);if(t<0){if(!(e.prev instanceof Function))throw new InvalidArgument("Error on std.advance(): parametric iterator is not a bi-directional iterator, thus advancing to negative direction is not possible.");r=e=>e.prev(),t=-t}else r=e=>e.next();for(;t-- >0;)e=r(e);return e}function lower_bound$1(e,t,r,n=less){let s=distance(e,t);for(;s>0;){let t=Math.floor(s/2),i=advance(e,t);n(i.value,r)?(e=i.next(),s-=t+1):s=t}return e}function upper_bound$1(e,t,r,n=less){let s=distance(e,t);for(;s>0;){let t=Math.floor(s/2),i=advance(e,t);n(r,i.value)?s=t:(e=i.next(),s-=t+1)}return e}function equal_range$1(e,t,r,n=less){e=lower_bound$1(e,t,r,n);let s=upper_bound$1(e,t,r,n);return new Pair(e,s)}function binary_search$1(e,t,r,n=less){return!(e=lower_bound$1(e,t,r,n)).equals(t)&&!n(r,e.value)}!function(e){e.Iterator=class extends ArrayIteratorBase{source(){return this._Get_array().source()}reverse(){return new ReverseIterator(this)}};let ReverseIterator=class ReverseIterator extends ArrayReverseIteratorBase{_Create_neighbor(e){return new ReverseIterator(e)}};e.ReverseIterator=ReverseIterator}(SetElementVector||(SetElementVector={}));let FlatSet=class FlatSet extends UniqueTreeSet{constructor(...e){super(e=>new SetElementVector(e)),k.construct(this,FlatSet,e=>{this.key_comp_=e},...e)}swap(e){[this.data_,e.data_]=[e.data_,this.data_],SetElementVector._Swap_associative(this.data_,e.data_),[this.key_comp_,e.key_comp_]=[e.key_comp_,this.key_comp_]}nth(e){return this.data_.nth(e)}key_comp(){return this.key_comp_}lower_bound(e){return lower_bound$1(this.begin(),this.end(),e,this.value_comp())}upper_bound(e){return upper_bound$1(this.begin(),this.end(),e,this.value_comp())}_Handle_insert({},{}){}_Handle_erase({},{}){}};(s=FlatSet||(FlatSet={})).Iterator=SetElementVector.Iterator,s.ReverseIterator=SetElementVector.ReverseIterator,s.__MODULE="experimental";let MultiTreeSet=class MultiTreeSet extends MultiSet{find(e){let t=this.lower_bound(e);return!t.equals(this.end())&&this._Key_eq(e,t.value)?t:this.end()}count(e){let t=this.find(e),r=0;for(;!t.equals(this.end())&&this._Key_eq(t.value,e);t=t.next())++r;return r}equal_range(e){return new Pair(this.lower_bound(e),this.upper_bound(e))}value_comp(){return this.key_comp()}_Key_eq(e,t){return!this.key_comp()(e,t)&&!this.key_comp()(t,e)}_Insert_by_key(e){let t=this.upper_bound(e);return t=this.data_.insert(t,e),this._Handle_insert(t,t.next()),t}_Insert_by_hint(e,t){let r=k.emplacable(this,e,t);if(!r)return this._Insert_by_key(t);{let r=this.data_.insert(e,t);return this._Handle_insert(r,r.next()),r}}_Insert_by_range(e,t){for(let r=e;!r.equals(t);r=r.next())this._Insert_by_key(r.value)}};let FlatMultiSet=class FlatMultiSet extends MultiTreeSet{constructor(...e){super(e=>new SetElementVector(e)),k.construct(this,FlatMultiSet,e=>{this.key_comp_=e},...e)}swap(e){[this.data_,e.data_]=[e.data_,this.data_],SetElementVector._Swap_associative(this.data_,e.data_),[this.key_comp_,e.key_comp_]=[e.key_comp_,this.key_comp_]}nth(e){return this.data_.nth(e)}key_comp(){return this.key_comp_}lower_bound(e){return lower_bound$1(this.begin(),this.end(),e,this.value_comp())}upper_bound(e){return upper_bound$1(this.begin(),this.end(),e,this.value_comp())}_Handle_insert({},{}){}_Handle_erase({},{}){}};(i=FlatMultiSet||(FlatMultiSet={})).Iterator=SetElementVector.Iterator,i.ReverseIterator=SetElementVector.ReverseIterator,i.__MODULE="experimental";let Entry=class Entry{constructor(e,t){this.first=e,this.second=t}equals(e){return equal_to(this.first,e.first)}less(e){return less(this.first,e.first)}hashCode(){return hash(this.first)}};let UniqueTreeMap=class UniqueTreeMap extends UniqueMap{find(e){let t=this.lower_bound(e);return!t.equals(this.end())&&this._Key_eq(e,t.first)?t:this.end()}equal_range(e){let t=this.lower_bound(e);return new Pair(t,!t.equals(this.end())&&this._Key_eq(e,t.first)?t.next():t)}value_comp(){return(e,t)=>this.key_comp()(e.first,t.first)}_Key_eq(e,t){return!this.key_comp()(e,t)&&!this.key_comp()(t,e)}emplace(e,t){let r=this.lower_bound(e);return!r.equals(this.end())&&this._Key_eq(r.first,e)?new Pair(r,!1):(r=this.data_.insert(r,new Entry(e,t)),this._Handle_insert(r,r.next()),new Pair(r,!0))}emplace_hint(e,t,r){let n=new Entry(t,r),s=k.emplacable(this,e,n);if(!s)return this.emplace(t,r).first;{let t=this.data_.insert(e,n);return this._Handle_insert(t,t.next()),t}}};let MapElementVector=class MapElementVector extends VectorContainer{constructor(e){super(),this.data_=[],this.associative_=e}nth(e){return new MapElementVector.Iterator(this,e)}static _Swap_associative(e,t){[e.associative_,t.associative_]=[t.associative_,e.associative_]}source(){return this.associative_}};!function(e){e.Iterator=class extends ArrayIteratorBase{source(){return this._Get_array().source()}reverse(){return new ReverseIterator(this)}get first(){return this.value.first}get second(){return this.value.second}set second(e){this.value.second=e}};let ReverseIterator=class ReverseIterator extends ArrayReverseIteratorBase{_Create_neighbor(e){return new ReverseIterator(e)}get first(){return this.value.first}get second(){return this.value.second}set second(e){this.value.second=e}};e.ReverseIterator=ReverseIterator}(MapElementVector||(MapElementVector={}));let FlatMap=class FlatMap extends UniqueTreeMap{constructor(...e){super(e=>new MapElementVector(e)),k.construct(this,FlatMap,e=>{this.key_comp_=e},...e)}swap(e){[this.data_,e.data_]=[e.data_,this.data_],MapElementVector._Swap_associative(this.data_,e.data_),[this.key_comp_,e.key_comp_]=[e.key_comp_,this.key_comp_]}nth(e){return this.data_.nth(e)}key_comp(){return this.key_comp_}lower_bound(e){return lower_bound$1(this.begin(),this.end(),this._Capsule_key(e),this.value_comp())}upper_bound(e){return upper_bound$1(this.begin(),this.end(),this._Capsule_key(e),this.value_comp())}_Capsule_key(e){return{first:e}}_Handle_insert({},{}){}_Handle_erase({},{}){}};(a=FlatMap||(FlatMap={})).Iterator=MapElementVector.Iterator,a.ReverseIterator=MapElementVector.ReverseIterator,a.__MODULE="experimental";let MultiTreeMap=class MultiTreeMap extends MultiMap{find(e){let t=this.lower_bound(e);return!t.equals(this.end())&&this._Key_eq(e,t.first)?t:this.end()}count(e){let t=this.find(e),r=0;for(;!t.equals(this.end())&&this._Key_eq(t.first,e);t=t.next())++r;return r}equal_range(e){return new Pair(this.lower_bound(e),this.upper_bound(e))}value_comp(){return(e,t)=>this.key_comp()(e.first,t.first)}_Key_eq(e,t){return!this.key_comp()(e,t)&&!this.key_comp()(t,e)}emplace(e,t){let r=this.upper_bound(e);return r=this.data_.insert(r,new Entry(e,t)),this._Handle_insert(r,r.next()),r}emplace_hint(e,t,r){let n=new Entry(t,r),s=k.emplacable(this,e,n);if(!s)return this.emplace(t,r);{let t=this.data_.insert(e,n);return this._Handle_insert(t,t.next()),t}}_Insert_by_range(e,t){for(let r=e;!r.equals(t);r=r.next())this.emplace(r.value.first,r.value.second)}};let FlatMultiMap=class FlatMultiMap extends MultiTreeMap{constructor(...e){super(e=>new MapElementVector(e)),k.construct(this,FlatMultiMap,e=>{this.key_comp_=e},...e)}swap(e){[this.data_,e.data_]=[e.data_,this.data_],MapElementVector._Swap_associative(this.data_,e.data_),[this.key_comp_,e.key_comp_]=[e.key_comp_,this.key_comp_]}nth(e){return this.data_.nth(e)}key_comp(){return this.key_comp_}lower_bound(e){return lower_bound$1(this.begin(),this.end(),this._Capsule_key(e),this.value_comp())}upper_bound(e){return upper_bound$1(this.begin(),this.end(),this._Capsule_key(e),this.value_comp())}_Capsule_key(e){return{first:e}}_Handle_insert({},{}){}_Handle_erase({},{}){}};(u=FlatMultiMap||(FlatMultiMap={})).Iterator=MapElementVector.Iterator,u.ReverseIterator=MapElementVector.ReverseIterator,u.__MODULE="experimental";var R=Object.freeze({__proto__:null,get FlatMap(){return FlatMap},get FlatMultiMap(){return FlatMultiMap},get FlatMultiSet(){return FlatMultiSet},get FlatSet(){return FlatSet}});let InsertIteratorBase=class InsertIteratorBase{next(){return this}};let InsertIterator=class InsertIterator extends InsertIteratorBase{constructor(e,t){super(),this.container_=e,this.it_=t}set value(e){this.it_=this.container_.insert(this.it_,e),this.it_=this.it_.next()}equals(e){return equal_to(this.it_,e.it_)}};let FrontInsertIterator=class FrontInsertIterator extends InsertIteratorBase{constructor(e){super(),this.source_=e}set value(e){this.source_.push_front(e)}equals(e){return equal_to(this.source_,e.source_)}};let BackInsertIterator=class BackInsertIterator extends InsertIteratorBase{constructor(e){super(),this.source_=e}set value(e){this.source_.push_back(e)}equals(e){return equal_to(this.source_,e.source_)}};let ArrayReverseIterator=class ArrayReverseIterator extends ArrayReverseIteratorBase{_Create_neighbor(e){return new ArrayReverseIterator(e)}};let ArrayIterator=class ArrayIterator extends ArrayIteratorBase{reverse(){return new ArrayReverseIterator(this)}source(){return this._Get_array()}};let Vector=class Vector extends VectorContainer{constructor(...e){if(super(),0===e.length)this.data_=[];else if(e[0]instanceof Array){let t=e[0];this.data_=!0===e[1]?t:t.slice()}else if(1===e.length&&e[0]instanceof Vector){let t=e[0];this.data_=t.data_.slice()}else 2===e.length&&(this.data_=[],this.assign(e[0],e[1]))}static wrap(e){return new Vector(e,!0)}nth(e){return new Vector.Iterator(this,e)}source(){return this}};function begin(e){return e instanceof Array&&(e=Vector.wrap(e)),e.begin()}function end(e){return e instanceof Array&&(e=Vector.wrap(e)),e.end()}function back_inserter(e){return e instanceof Array&&(e=Vector.wrap(e)),new BackInsertIterator(e)}function make_heap$1(e,t,r=less){let n=distance(e,t);if(n<2)return;let s=(n-2>>1)+1;do{let t=e.advance(--s).value;_Adjust_heap(e,s,n,s,t,r)}while(0!==s)}function push_heap$1(e,t,r=less){let n=t.prev().value;_Promote_heap(e,0,distance(e,t)-1,n,r)}function pop_heap$1(e,t,r=less){let n=t.prev(),s=n.value;n.value=e.value,_Adjust_heap(e,0,distance(e,t)-1,0,s,r)}function is_heap$1(e,t,r=less){let n=is_heap_until$1(e,t,r);return n.equals(t)}function is_heap_until$1(e,t,r=less){var n,s;let i=0;for(let a=e.next();n=a,s=t.index(),n.base instanceof Function?s<n:n<s;a=a.next(),i^=1){if(r(e.value,a.value))return a;e=advance(e,i)}return t}function sort_heap$1(e,t,r=less){for(;distance(e,t)>1;t=t.prev())pop_heap$1(e,t,r)}function _Promote_heap(e,t,r,n,s){for(let i=r-1>>1;r>t&&s(e.advance(i).value,n);i=r-1>>1)e.advance(r).value=e.advance(i).value,r=i;e.advance(r).value=n}function _Adjust_heap(e,t,r,n,s,i){let a=2*n+2;for(;a<r;a=2*a+2)i(e.advance(a).value,e.advance(a-1).value)&&--a,e.advance(n).value=e.advance(a).value,n=a;a===r&&(e.advance(n).value=e.advance(a-1).value,n=a-1),_Promote_heap(e,t,n,s,i)}function for_each$1(e,t,r){for(let n=e;!n.equals(t);n=n.next())r(n.value);return r}function for_each_n$1(e,t,r){for(let n=0;n<t;++n)r(e.value),e=e.next();return e}function all_of$1(e,t,r){for(let n=e;!n.equals(t);n=n.next())if(!1===r(n.value))return!1;return!0}function any_of$1(e,t,r){for(let n=e;!n.equals(t);n=n.next())if(!0===r(n.value))return!0;return!1}function none_of$1(e,t,r){return!any_of$1(e,t,r)}function equal$1(e,t,r,n=equal_to){for(;!e.equals(t);)if(!n(e.value,r.value))return!1;else e=e.next(),r=r.next();return!0}function lexicographical_compare$1(e,t,r,n,s=less){for(;!e.equals(t);)if(r.equals(n)||s(r.value,e.value))return!1;else{if(s(e.value,r.value))return!0;e=e.next(),r=r.next()}return!r.equals(n)}function find$1(e,t,r){return find_if$1(e,t,e=>equal_to(e,r))}function find_if$1(e,t,r){for(let n=e;!n.equals(t);n=n.next())if(r(n.value))return n;return t}function find_if_not$1(e,t,r){return find_if$1(e,t,e=>!r(e))}function find_end$1(e,t,r,n,s=equal_to){if(r.equals(n))return t;let i=t;for(;!e.equals(t);e=e.next()){let a=e,u=r;for(;s(a.value,u.value);){if(a=a.next(),(u=u.next()).equals(n)){i=e;break}if(a.equals(t))return i}}return i}function find_first_of$1(e,t,r,n,s=equal_to){for(;!e.equals(t);e=e.next())for(let t=r;!t.equals(n);t=t.next())if(s(e.value,t.value))return e;return t}function adjacent_find$1(e,t,r=equal_to){if(!e.equals(t)){let n=e.next();for(;!n.equals(t);){if(r(e.value,n.value))return e;e=e.next(),n=n.next()}}return t}function search$1(e,t,r,n,s=equal_to){if(r.equals(n))return e;for(;!e.equals(t);e=e.next()){let i=e,a=r;for(;s(i.value,a.value);){if(a.equals(n))return e;if(i.equals(t))return t;i=i.next(),a=a.next()}}return t}function search_n$1(e,t,r,n,s=equal_to){let i=advance(e,distance(e,t)-r);for(;!e.equals(i);e=e.next()){let t=e,i=0;for(;s(t.value,n);)if(t=t.next(),++i===r)return e}return t}function mismatch$1(e,t,r,n=equal_to){for(;!e.equals(t)&&n(e.value,r.value);)e=e.next(),r=r.next();return new Pair(e,r)}function count$1(e,t,r){return count_if$1(e,t,e=>equal_to(e,r))}function count_if$1(e,t,r){let n=0;for(let s=e;!s.equals(t);s=s.next())r(s.value)&&++n;return n}function equal(e,t,r=equal_to){return size(e)===size(t)&&equal$1(begin(e),end(e),begin(t),r)}function sort$1(e,t,r=less){let n=t.index()-e.index();if(n<=0)return;let s=e.advance(Math.floor(n/2)),i=s.value;s.index()!==e.index()&&iter_swap(e,s);let a=1;for(let t=1;t<n;++t){let n=e.advance(t);r(n.value,i)&&(iter_swap(n,e.advance(a)),++a)}iter_swap(e,e.advance(a-1)),sort$1(e,e.advance(a-1),r),sort$1(e.advance(a),t,r)}function stable_sort$1(e,t,r=less){sort$1(e,t,function(e,t){return r(e,t)&&!r(t,e)})}function partial_sort$1(e,t,r,n=less){for(let s=e;!s.equals(t);s=s.next()){let e=s;for(let t=s.next();!t.equals(r);t=t.next())n(t.value,e.value)&&(e=t);s.equals(e)||iter_swap(s,e)}}function partial_sort_copy$1(e,t,r,n,s=less){let i=distance(e,t),a=distance(r,n),u=new Vector(e,t);return sort$1(u.begin(),u.end(),s),r=i>a?copy$1(u.begin(),u.begin().advance(a),r):copy$1(u.begin(),u.end(),r)}function nth_element$1(e,t,r,n=less){let s=distance(e,t);for(let i=e;!i.equals(r);i=i.next()){let a=0;for(let t=e;!t.equals(r);t=t.next())if(i.equals(t))continue;else if(n(i.value,t.value)&&++a>s)break;if(a===s){iter_swap(t,i);return}}}function is_sorted$1(e,t,r=less){return is_sorted_until$1(e,t,r).equals(t)}function is_sorted_until$1(e,t,r=less){if(e.equals(t))return t;for(let n=e.next();!n.equals(t);n=n.next())if(r(n.value,e.value))return n;else e=e.next();return t}function randint(e,t){return Math.floor(Math.random()*(t-e+1))+e}function sample$1(e,t,r,n){let s=distance(e,t),i=[];for(let e=0;e<s;++e)i.push(e);let a=new Vector;n=Math.min(n,s);for(let e=0;e<n;++e){let e=randint(0,i.length-1);a.push(i.splice(e,1)[0])}sort$1(a.begin(),a.end());for(let e=n-1;e>=1;--e)a.set(e,a.at(e)-a.at(e-1));for(let t of a)e=advance(e,t),r.value=e.value,r=r.next();return r}function copy$1(e,t,r){for(;!e.equals(t);e=e.next())r.value=e.value,r=r.next();return r}function copy_n$1(e,t,r){for(let n=0;n<t;++n)r.value=e.value,e=e.next(),r=r.next();return r}function copy_if$1(e,t,r,n){for(;!e.equals(t);e=e.next())n(e.value)&&(r.value=e.value,r=r.next());return r}function copy_backward$1(e,t,r){for(t=t.prev();!t.equals(e);)t=t.prev(),(r=r.prev()).value=t.value;return r}function fill$1(e,t,r){for(;!e.equals(t);e=e.next())e.value=r}function fill_n$1(e,t,r){for(let n=0;n<t;++n)e.value=r,e=e.next();return e}function transform$1(...e){return 4===e.length?function(e,t,r,n){for(;!e.equals(t);e=e.next())r.value=n(e.value),r=r.next();return r}(...e):function(e,t,r,n,s){for(;!e.equals(t);)n.value=s(e.value,r.value),e=e.next(),r=r.next(),n=n.next();return n}(...e)}function generate$1(e,t,r){for(;!e.equals(t);e=e.next())e.value=r()}function generate_n$1(e,t,r){for(;t-- >0;)e.value=r(),e=e.next();return e}function is_unique$1(e,t,r=equal_to){if(e.equals(t))return!0;let n=e.next();for(;!n.equals(t);n=n.next()){if(!0===r(e.value,n.value))return!1;e=e.next()}return!0}function unique$1(e,t,r=equal_to){if(e.equals(t))return t;let n=e;for(e=e.next();!e.equals(t);e=e.next())r(n.value,e.value)||((n=n.next()).value=e.value);return n.next()}function unique_copy$1(e,t,r,n=equal_to){if(e.equals(t))return r;for(r.value=e.value,e=e.next();!e.equals(t);e=e.next())n(e.value,r.value)||((r=r.next()).value=e.value);return r.next()}function remove$1(e,t,r){return remove_if$1(e,t,e=>equal_to(e,r))}function remove_if$1(e,t,r){let n=e;for(;!e.equals(t);)r(e.value)||(n.value=e.value,n=n.next()),e=e.next();return n}function remove_copy$1(e,t,r,n){return remove_copy_if$1(e,t,r,e=>equal_to(e,n))}function remove_copy_if$1(e,t,r,n){for(;!e.equals(t);e=e.next())n(e.value)||(r.value=e.value,r=r.next());return r}function replace$1(e,t,r,n){return replace_if$1(e,t,e=>equal_to(e,r),n)}function replace_if$1(e,t,r,n){for(let s=e;!s.equals(t);s=s.next())!0===r(s.value)&&(s.value=n)}function replace_copy$1(e,t,r,n,s){return replace_copy_if$1(e,t,r,e=>equal_to(e,n),s)}function replace_copy_if$1(e,t,r,n,s){for(;!e.equals(t);e=e.next())n(e.value)?r.value=s:r.value=e.value,r=r.next();return r}function iter_swap(e,t){[e.value,t.value]=[t.value,e.value]}function swap_ranges$1(e,t,r){for(;!e.equals(t);e=e.next())iter_swap(e,r),r=r.next();return r}function reverse$1(e,t){for(;!1===e.equals(t)&&!1===e.equals(t=t.prev());)iter_swap(e,t),e=e.next()}function reverse_copy$1(e,t,r){for(;!t.equals(e);)t=t.prev(),r.value=t.value,r=r.next();return r}function shift_left$1(e,t,r){let n=advance(e,r);return copy$1(n,t,e)}function shift_right$1(e,t,r){let n=advance(t,-r);return copy_backward$1(e,n,t)}function rotate$1(e,t,r){for(;!e.equals(t)&&!t.equals(r);)iter_swap(e,t),e=e.next(),t=t.next();return e}function rotate_copy$1(e,t,r,n){return n=copy$1(t,r,n),copy$1(e,t,n)}function shuffle$1(e,t){for(let r=e;!r.equals(t);r=r.next()){let n=randint(e.index(),t.index()-1);r.index()!==n&&iter_swap(r,e.advance(n))}}function min_element$1(e,t,r=less){let n=e;for(e=e.next();!e.equals(t);e=e.next())r(e.value,n.value)&&(n=e);return n}function max_element$1(e,t,r=less){let n=e;for(e=e.next();!e.equals(t);e=e.next())r(n.value,e.value)&&(n=e);return n}function minmax_element$1(e,t,r=less){let n=e,s=e;for(e=e.next();!e.equals(t);e=e.next())r(e.value,n.value)&&(n=e),r(s.value,e.value)&&(s=e);return new Pair(n,s)}function is_permutation$1(e,t,r,n=equal_to){let s=mismatch$1(e,t,r,n);if(e=s.first,r=s.second,e.equals(t))return!0;let i=advance(r,distance(e,t));for(let s=e;!s.equals(t);s=s.next()){let lambda=e=>n(e,s.value);if(find_if$1(e,s,lambda).equals(s)){let e=count_if$1(r,i,lambda);if(0===e||count_if$1(s,t,lambda)!==e)return!1}}return!0}function prev_permutation$1(e,t,r=less){if(!0===e.equals(t))return!1;let n=t.prev();if(!0===e.equals(n))return!1;for(;;){let s=n;if(n=n.prev(),!0===r(s.value,n.value)){let e=t.prev();for(;!1===r(e.value,n.value);)e=e.prev();return iter_swap(n,e),reverse$1(s,t),!0}if(!0===n.equals(e))return reverse$1(e,t),!1}}function next_permutation$1(e,t,r=less){if(!0===e.equals(t))return!1;let n=t.prev();if(!0===e.equals(n))return!1;for(;;){let s=n;if(!0===r((n=n.prev()).value,s.value)){let e=t.prev();for(;!1===r(n.value,e.value);)e=e.prev();return iter_swap(n,e),reverse$1(s,t),!0}if(!0===n.equals(e))return reverse$1(e,t),!1}}function is_partitioned$1(e,t,r){for(;!e.equals(t)&&r(e.value);)e=e.next();for(;!e.equals(t);e=e.next())if(r(e.value))return!1;return!0}function partition_point$1(e,t,r){let n=distance(e,t);for(;n>0;){let t=Math.floor(n/2),s=advance(e,t);r(s.value)?(e=s.next(),n-=t+1):n=t}return e}function partition$1(e,t,r){return stable_partition$1(e,t,r)}function stable_partition$1(e,t,r){for(;!e.equals(t)&&r(e.value);){for(;r(e.value);)if((e=e.next()).equals(t))return e;do if(t=t.prev(),e.equals(t))return e;while(!r(t.value));iter_swap(e,t),e=e.next()}return t}function partition_copy$1(e,t,r,n,s){for(;!e.equals(t);e=e.next())s(e.value)?(r.value=e.value,r=r.next()):(n.value=e.value,n=n.next());return new Pair(r,n)}function merge$1(e,t,r,n,s,i=less){for(;;){if(e.equals(t))return copy$1(r,n,s);if(r.equals(n))return copy$1(e,t,s);i(e.value,r.value)?(s.value=e.value,e=e.next()):(s.value=r.value,r=r.next()),s=s.next()}}function inplace_merge$1(e,t,r,n=less){let s=new Vector;merge$1(e,t,t,r,back_inserter(s),n),copy$1(s.begin(),s.end(),e)}function includes$1(e,t,r,n,s=less){for(;!r.equals(n);){if(e.equals(t)||s(r.value,e.value))return!1;s(e.value,r.value)||(r=r.next()),e=e.next()}return!0}function set_union$1(e,t,r,n,s,i=less){for(;;){if(e.equals(t))return copy$1(r,n,s);if(r.equals(n))return copy$1(e,t,s);i(e.value,r.value)?(s.value=e.value,e=e.next()):(i(r.value,e.value)?s.value=r.value:(s.value=e.value,e=e.next()),r=r.next()),s=s.next()}}function set_intersection$1(e,t,r,n,s,i=less){for(;!e.equals(t)&&!r.equals(n);)i(e.value,r.value)?e=e.next():(i(r.value,e.value)||(s.value=e.value,s=s.next(),e=e.next()),r=r.next());return s}function set_difference$1(e,t,r,n,s,i=less){for(;!e.equals(t)&&!r.equals(n);)i(e.value,r.value)?(s.value=e.value,s=s.next(),e=e.next()):(i(r.value,e.value)||(e=e.next()),r=r.next());return copy$1(e,t,s)}function set_symmetric_difference$1(e,t,r,n,s,i=less){for(;;){if(e.equals(t))return copy$1(r,n,s);if(r.equals(n))return copy$1(e,t,s);i(e.value,r.value)?(s.value=e.value,s=s.next(),e=e.next()):(i(r.value,e.value)?(s.value=r.value,s=s.next()):e=e.next(),r=r.next())}}function plus(e,t){return e.plus instanceof Function?e.plus(t):e+t}function minus(e,t){return e.minus instanceof Function?e.minus(t):e-t}function multiplies(e,t){return e.multiplies instanceof Function?e.multiplies(t):e*t}function gcd(e,t){for(t=t.valueOf();0!==t;)[e,t]=[t,e%t];return e}function iota$1(e,t,r){for(;!e.equals(t);e=e.next())e.value=r++}function accumulate$1(e,t,r,n=plus){for(;!e.equals(t);e=e.next())r=n(r,e.value);return r}function inner_product$1(e,t,r,n,s=plus,i=multiplies){for(;!e.equals(t);e=e.next())n=s(n,i(e.value,r.value)),r=r.next();return n}function adjacent_difference$1(e,t,r,n=minus){var s,i,a;let u;if(e.equals(t))return r;for([e,r,u]=_Transform_initialize(e,r,e=>e,a);!e.equals(t);e=e.next())r.value=n(e.value,u),u=e.value,r=r.next();return r}function partial_sum$1(e,t,r,n=plus){var s,i,a;let u;if(e.equals(t))return r;for([e,r,u]=_Transform_initialize(e,r,e=>e,a);!e.equals(t);e=e.next())u=n(u,e.value),r.value=u,r=r.next();return r}function inclusive_scan$1(e,t,r,n=plus,s){return transform_inclusive_scan$1(e,t,r,n,e=>e,s)}function exclusive_scan$1(e,t,r,n,s=plus){return transform_exclusive_scan$1(e,t,r,n,s,e=>e)}function transform_inclusive_scan$1(e,t,r,n,s,i){let a;if(e.equals(t))return r;for([e,r,a]=_Transform_initialize(e,r,s,i);!e.equals(t);e=e.next())a=n(a,s(e.value)),r.value=a,r=r.next();return r}function transform_exclusive_scan$1(e,t,r,n,s,i){let a;if(e.equals(t))return r;let u=i(e.value);for([e,r,a]=_Transform_initialize(e,r,i,n);!e.equals(t);e=e.next())a=s(u,a),u=i(e.value),r.value=a,r=r.next();return r}function _Transform_initialize(e,t,r,n){let s=r(void 0===n?e.value:n);return t.value=s,[e.next(),t.next(),s]}(_=Vector||(Vector={})).Iterator=ArrayIterator,_.ReverseIterator=ArrayReverseIterator;var L=Object.freeze({__proto__:null,accumulate:function(e,t,r=plus){return accumulate$1(begin(e),end(e),t,r)},adjacent_difference:function(e,t,r=minus){return adjacent_difference$1(begin(e),end(e),t,r)},adjacent_find:function(e,t=equal_to){return adjacent_find$1(begin(e),end(e),t)},all_of:function(e,t){return all_of$1(begin(e),end(e),t)},any_of:function(e,t){return any_of$1(begin(e),end(e),t)},binary_search:function(e,t,r=less){return binary_search$1(begin(e),end(e),t,r)},copy:function(e,t){return copy$1(begin(e),end(e),t)},copy_backward:function(e,t){return copy_backward$1(begin(e),end(e),t)},copy_if:function(e,t,r){return copy_if$1(begin(e),end(e),t,r)},copy_n:function(e,t,r){return copy_n$1(begin(e),t,r)},count:function(e,t){return count$1(begin(e),end(e),t)},count_if:function(e,t){return count_if$1(begin(e),end(e),t)},equal,equal_range:function(e,t,r=less){return equal_range$1(begin(e),end(e),t,r)},exclusive_scan:function(e,t,r,n=plus){return exclusive_scan$1(begin(e),end(e),t,r,n)},fill:function(e,t){return fill$1(begin(e),end(e),t)},fill_n:function(e,t,r){return fill_n$1(begin(e),t,r)},find:function(e,t){return find$1(begin(e),end(e),t)},find_end:function(e,t,r=equal_to){return find_end$1(begin(e),end(e),begin(t),end(t),r)},find_first_of:function(e,t,r=equal_to){return find_first_of$1(begin(e),end(e),begin(t),end(t),r)},find_if:function(e,t){return find_if$1(begin(e),end(e),t)},find_if_not:function(e,t){return find_if_not$1(begin(e),end(e),t)},for_each:function(e,t){return for_each$1(begin(e),end(e),t)},for_each_n:function(e,t,r){return for_each_n$1(begin(e),t,r)},generate:function(e,t){return generate$1(begin(e),end(e),t)},generate_n:function(e,t,r){return generate_n$1(begin(e),t,r)},includes:function(e,t,r=less){return!(size(e)<size(t))&&includes$1(begin(e),end(e),begin(t),end(t),r)},inclusive_scan:function(e,t,r=plus,n){return inclusive_scan$1(begin(e),end(e),t,r,n)},inner_product:function(e,t,r,n=plus,s=multiplies){return inner_product$1(begin(e),end(e),begin(t),r,n,s)},inplace_merge:function(e,t,r=less){return inplace_merge$1(begin(e),t,end(e),r)},iota:function(e,t){return iota$1(begin(e),end(e),t)},is_heap:function(e,t=less){return is_heap$1(begin(e),end(e),t)},is_heap_until:function(e,t=less){return is_heap_until$1(begin(e),end(e),t)},is_partitioned:function(e,t){return is_partitioned$1(begin(e),end(e),t)},is_permutation:function(e,t,r=equal_to){return size(e)===size(t)&&is_permutation$1(begin(e),end(e),begin(t),r)},is_sorted:function(e,t=less){return is_sorted$1(begin(e),end(e),t)},is_sorted_until:function(e,t=less){return is_sorted_until$1(begin(e),end(e),t)},is_unique:function(e,t=equal_to){return is_unique$1(begin(e),end(e),t)},lexicographical_compare:function(e,t,r=less){return lexicographical_compare$1(begin(e),end(e),begin(t),end(t),r)},lower_bound:function(e,t,r=less){return lower_bound$1(begin(e),end(e),t,r)},make_heap:function(e,t=less){return make_heap$1(begin(e),end(e),t)},max_element:function(e,t=less){return max_element$1(begin(e),end(e),t)},merge:function(e,t,r,n=less){return merge$1(begin(e),end(e),begin(t),end(t),r,n)},min_element:function(e,t=less){return min_element$1(begin(e),end(e),t)},minmax_element:function(e,t=less){return minmax_element$1(begin(e),end(e),t)},mismatch:function(e,t,r=equal_to){if(size(e)===size(t))return mismatch$1(begin(e),end(e),begin(t),r);let n=Math.min(size(e),size(t)),s=begin(e),i=begin(t);for(let e=0;e<n&&!1!==r(s.value,i.value);++e)s=s.next(),i=i.next();return new Pair(s,i)},next_permutation:function(e,t=less){return next_permutation$1(begin(e),end(e),t)},none_of:function(e,t){return none_of$1(begin(e),end(e),t)},nth_element:function(e,t,r=less){return nth_element$1(begin(e),t,end(e),r)},partial_sort:function(e,t,r=less){return partial_sort$1(begin(e),t,end(e),r)},partial_sort_copy:function(e,t,r=less){return partial_sort_copy$1(begin(e),end(e),begin(t),end(t),r)},partial_sum:function(e,t,r=plus){return partial_sum$1(begin(e),end(e),t,r)},partition:function(e,t){return partition$1(begin(e),end(e),t)},partition_copy:function(e,t,r,n){return partition_copy$1(begin(e),end(e),t,r,n)},partition_point:function(e,t){return partition_point$1(begin(e),end(e),t)},pop_heap:function(e,t=less){return pop_heap$1(begin(e),end(e),t)},prev_permutation:function(e,t=less){return prev_permutation$1(begin(e),end(e),t)},push_heap:function(e,t=less){return push_heap$1(begin(e),end(e),t)},remove:function(e,t){return remove$1(begin(e),end(e),t)},remove_copy:function(e,t,r){return remove_copy$1(begin(e),end(e),t,r)},remove_copy_if:function(e,t,r){return remove_copy_if$1(begin(e),end(e),t,r)},remove_if:function(e,t){return remove_if$1(begin(e),end(e),t)},replace:function(e,t,r){return replace$1(begin(e),end(e),t,r)},replace_copy:function(e,t,r,n){return replace_copy$1(begin(e),end(e),t,r,n)},replace_copy_if:function(e,t,r,n){return replace_copy_if$1(begin(e),end(e),t,r,n)},replace_if:function(e,t,r){return replace_if$1(begin(e),end(e),t,r)},reverse:function(e){return reverse$1(begin(e),end(e))},reverse_copy:function(e,t){return reverse_copy$1(begin(e),end(e),t)},rotate:function(e,t){return rotate$1(begin(e),t,end(e))},rotate_copy:function(e,t,r){return rotate_copy$1(begin(e),t,end(e),r)},sample:function(e,t,r){return sample$1(begin(e),end(e),t,r)},search:function(e,t,r=equal_to){return search$1(begin(e),end(e),begin(t),end(t),r)},search_n:function(e,t,r,n=equal_to){return search_n$1(begin(e),end(e),t,r,n)},set_difference:function(e,t,r,n=less){return set_difference$1(begin(e),end(e),begin(t),end(t),r,n)},set_intersection:function(e,t,r,n=less){return set_intersection$1(begin(e),end(e),begin(t),end(t),r,n)},set_symmetric_difference:function(e,t,r,n=less){return set_symmetric_difference$1(begin(e),end(e),begin(t),end(t),r,n)},set_union:function(e,t,r,n=less){return set_union$1(begin(e),end(e),begin(t),end(t),r,n)},shift_left:function(e,t){return shift_left$1(begin(e),end(e),t)},shift_right:function(e,t){return shift_right$1(begin(e),end(e),t)},shuffle:function(e){return shuffle$1(begin(e),end(e))},sort:function(e,t=less){return sort$1(begin(e),end(e),t)},sort_heap:function(e,t=less){return sort_heap$1(begin(e),end(e),t)},stable_partition:function(e,t){return stable_partition$1(begin(e),end(e),t)},stable_sort:function(e,t=less){return stable_sort$1(begin(e),end(e),t)},swap_ranges:function(e,t){return swap_ranges$1(begin(e),end(e),begin(t))},transform:function(e,...t){let r=transform$1.bind(void 0,begin(e),end(e));return 3===t.length?r(...t):r(end(t[1]),t[2],t[3])},transform_exclusive_scan:function(e,t,r,n,s){return transform_exclusive_scan$1(begin(e),end(e),t,r,n,s)},transform_inclusive_scan:function(e,t,r,n,s){return transform_inclusive_scan$1(begin(e),end(e),t,r,n,s)},unique:function(e,t=equal_to){return unique$1(begin(e),end(e),t)},unique_copy:function(e,t,r=equal_to){return unique_copy$1(begin(e),end(e),t,r)},upper_bound:function(e,t,r=less){return upper_bound$1(begin(e),end(e),t,r)}});let Deque=class Deque extends ArrayContainer{constructor(...e){if(super(),0===e.length&&this.clear(),1===e.length&&e[0]instanceof Array){let t=e[0],r=new NativeArrayIterator(t,0),n=new NativeArrayIterator(t,t.length);this.assign(r,n)}else if(1===e.length&&e[0]instanceof Deque){let t=e[0];this.assign(t.begin(),t.end())}else 2===e.length&&this.assign(e[0],e[1])}assign(e,t){this.clear(),this.insert(this.end(),e,t)}clear(){this.matrix_=[[]],this.size_=0,this.capacity_=Deque.MIN_CAPACITY}resize(e){e=Deque._Emend(e,"resize");let t=e-this.size();t>0?this.insert(this.end(),t,void 0):t<0&&this.erase(this.end().advance(-t),this.end())}reserve(e){this._Reserve(Deque._Emend(e,"reserve"))}_Reserve(e){let t=[[]],r=this._Compute_col_size(e);for(let e=0;e<this.matrix_.length;++e){let n=this.matrix_[e];for(let e=0;e<n.length;++e){let s=t[t.length-1];t.length<Deque.ROW_SIZE&&s.length===r&&(s=[],t.push(s)),s.push(n[e])}}this.matrix_=t,this.capacity_=e}shrink_to_fit(){this._Reserve(this.size())}swap(e){this._Swap(e)}_Swap(e){[this.matrix_,e.matrix_]=[e.matrix_,this.matrix_],[this.size_,e.size_]=[e.size_,this.size_],[this.capacity_,e.capacity_]=[e.capacity_,this.capacity_]}static _Emend(e,t){if((e=Math.floor(e))<=0)throw new InvalidArgument(`Error on Deque.${t}(): n must be positive integer -> (n = ${e})`);return e}size(){return this.size_}capacity(){return this.capacity_}nth(e){return new Deque.Iterator(this,e)}[Symbol.iterator](){return new Deque.ForOfAdaptor(this.matrix_)}source(){return this}_At(e){let t=this._Fetch_index(e);return this.matrix_[t.first][t.second]}_Set(e,t){let r=this._Fetch_index(e);this.matrix_[r.first][r.second]=t}_Fetch_index(e){let t;for(t=0;t<this.matrix_.length;t++){let r=this.matrix_[t];if(e<r.length)break;e-=r.length}return t===this.matrix_.length&&t--,new Pair(t,e)}_Compute_col_size(e=this.capacity_){return Math.floor(e/Deque.ROW_SIZE)}push(...e){if(0===e.length)return this.size();let t=new NativeArrayIterator(e,0),r=new NativeArrayIterator(e,e.length);return this._Insert_by_range(this.end(),t,r),this.size()}push_front(e){this._Try_expand_capacity(this.size_+1),this._Try_add_row_at_front(),this.matrix_[0].unshift(e),++this.size_}push_back(e){this._Try_expand_capacity(this.size_+1),this._Try_add_row_at_back(),this.matrix_[this.matrix_.length-1].push(e),++this.size_}pop_front(){if(!0===this.empty())throw y.empty(this.constructor,"pop_front");this.matrix_[0].shift(),0===this.matrix_[0].length&&this.matrix_.length>1&&this.matrix_.shift(),this.size_--}_Pop_back(){let e=this.matrix_[this.matrix_.length-1];e.pop(),0===e.length&&this.matrix_.length>1&&this.matrix_.pop(),this.size_--}_Insert_by_range(e,t,r){let n=this.size_+distance(t,r);if(n===this.size_)return e;if(!0===e.equals(this.end()))this._Try_expand_capacity(n),this._Insert_to_end(t,r),e=this.nth(this.size_);else if(n>this.capacity_){let s=new Deque;s._Reserve(Math.max(n,Math.floor(this.capacity_*Deque.MAGNIFIER))),s._Insert_to_end(this.begin(),e),s._Insert_to_end(t,r),s._Insert_to_end(e,this.end()),this._Swap(s)}else this._Insert_to_middle(e,t,r);return this.size_=n,e}_Insert_to_middle(e,t,r){let n=this._Compute_col_size(),s=this._Fetch_index(e.index()),i=this.matrix_[s.first],a=s.second,u=i.splice(a);for(;!t.equals(r);t=t.next()){if(i.length===n&&this.matrix_.length<Deque.ROW_SIZE){i=[];let e=this.matrix_.splice(++s.first);this.matrix_.push(i),this.matrix_.push(...e)}i.push(t.value)}for(let e=0;e<u.length;++e){if(i.length===n&&this.matrix_.length<Deque.ROW_SIZE){i=[];let e=this.matrix_.splice(++s.first);this.matrix_.push(i),this.matrix_.push(...e)}i.push(u[e])}}_Insert_to_end(e,t){for(;!e.equals(t);e=e.next())this._Try_add_row_at_back(),this.matrix_[this.matrix_.length-1].push(e.value)}_Try_expand_capacity(e){return!(e<=this.capacity_)&&(e=Math.max(e,Math.floor(this.capacity_*Deque.MAGNIFIER)),this._Reserve(e),!0)}_Try_add_row_at_front(){let e=this._Compute_col_size();return this.matrix_[0].length>=e&&this.matrix_.length<Deque.ROW_SIZE&&(this.matrix_=[[]].concat(...this.matrix_),!0)}_Try_add_row_at_back(){let e=this._Compute_col_size();return this.matrix_[this.matrix_.length-1].length>=e&&this.matrix_.length<Deque.ROW_SIZE&&(this.matrix_.push([]),!0)}_Erase_by_range(e,t){let r;if(e.index()>=this.size())return e;r=t.index()>=this.size()?this.size()-e.index():t.index()-e.index(),this.size_-=r;let n=null,s=null,i=0;for(;0!==r;){let t=this._Fetch_index(e.index()),a=this.matrix_[t.first],u=t.second,_=Math.min(r,a.length-u);a.splice(u,_),0!==a.length&&(0===i?n=a:s=a),0===a.length&&this.matrix_.length>1&&this.matrix_.splice(t.first,1),r-=_,++i}return null!==n&&null!==s&&n.length+s.length<=this._Compute_col_size()&&(n.push(...s),this.matrix_.splice(this.matrix_.indexOf(s),1)),e}};!function(e){e.Iterator=ArrayIterator,e.ReverseIterator=ArrayReverseIterator,e.ROW_SIZE=8,e.MIN_CAPACITY=36,e.MAGNIFIER=1.5;let ForOfAdaptor=class ForOfAdaptor{constructor(e){this.matrix_=e,this.row_=0,this.col_=0}next(){if(this.row_===this.matrix_.length)return{done:!0,value:void 0};{let e=this.matrix_[this.row_][this.col_];return++this.col_===this.matrix_[this.row_].length&&(++this.row_,this.col_=0),{done:!1,value:e}}}[Symbol.iterator](){return this}};e.ForOfAdaptor=ForOfAdaptor}(Deque||(Deque={}));let ListIterator=class ListIterator{constructor(e,t,r){this.prev_=e,this.next_=t,this.value_=r}static _Set_prev(e,t){e.prev_=t}static _Set_next(e,t){e.next_=t}prev(){return this.prev_}next(){return this.next_}get value(){return this._Try_value(),this.value_}_Try_value(){if(void 0===this.value_&&!0===this.equals(this.source().end()))throw y.iterator_end_value(this.source())}equals(e){return this===e}};let ListContainer=class ListContainer extends Container{constructor(){super(),this.end_=this._Create_iterator(null,null),this.clear()}assign(e,t){this.clear(),this.insert(this.end(),e,t)}clear(){ListIterator._Set_prev(this.end_,this.end_),ListIterator._Set_next(this.end_,this.end_),this.begin_=this.end_,this.size_=0}resize(e){let t=e-this.size();t>0?this.insert(this.end(),t,void 0):t<0&&this.erase(advance(this.end(),-t),this.end())}begin(){return this.begin_}end(){return this.end_}size(){return this.size_}push_front(e){this.insert(this.begin_,e)}push_back(e){this.insert(this.end_,e)}pop_front(){if(!0===this.empty())throw y.empty(this.end_.source().constructor.name,"pop_front");this.erase(this.begin_)}pop_back(){if(!0===this.empty())throw y.empty(this.end_.source().constructor.name,"pop_back");this.erase(this.end_.prev())}push(...e){if(0===e.length)return this.size();let t=new NativeArrayIterator(e,0),r=new NativeArrayIterator(e,e.length);return this._Insert_by_range(this.end(),t,r),this.size()}insert(e,...t){if(e.source()!==this.end_.source())throw y.not_my_iterator(this.end_.source(),"insert");if(!0===e.erased_)throw y.erased_iterator(this.end_.source(),"insert");return 1===t.length?this._Insert_by_repeating_val(e,1,t[0]):2===t.length&&"number"==typeof t[0]?this._Insert_by_repeating_val(e,t[0],t[1]):this._Insert_by_range(e,t[0],t[1])}_Insert_by_repeating_val(e,t,r){let n=new Repeater(0,r),s=new Repeater(t);return this._Insert_by_range(e,n,s)}_Insert_by_range(e,t,r){let n=e.prev(),s=null,i=0;for(let e=t;!1===e.equals(r);e=e.next()){let t=this._Create_iterator(n,null,e.value);0===i&&(s=t),ListIterator._Set_next(n,t),n=t,++i}return!0===e.equals(this.begin())&&(this.begin_=s),ListIterator._Set_next(n,e),ListIterator._Set_prev(e,n),this.size_+=i,s}erase(e,t=e.next()){return this._Erase_by_range(e,t)}_Erase_by_range(e,t){if(e.source()!==this.end_.source())throw y.not_my_iterator(this.end_.source(),"insert");if(!0===e.erased_)throw y.erased_iterator(this.end_.source(),"insert");if(e.equals(this.end_))return this.end_;let r=e.prev();ListIterator._Set_next(r,t),ListIterator._Set_prev(t,r);for(let r=e;!r.equals(t);r=r.next())r.erased_=!0,--this.size_;return e.equals(this.begin_)&&(this.begin_=t),t}swap(e){[this.begin_,e.begin_]=[e.begin_,this.begin_],[this.end_,e.end_]=[e.end_,this.end_],[this.size_,e.size_]=[e.size_,this.size_]}};let List=class List extends ListContainer{constructor(...e){if(super(),this.ptr_={value:this},List.Iterator._Set_source_ptr(this.end_,this.ptr_),0===e.length);else if(1===e.length&&e[0]instanceof Array){let t=e[0];this.push(...t)}else if(1===e.length&&e[0]instanceof List){let t=e[0];this.assign(t.begin(),t.end())}else 2===e.length&&this.assign(e[0],e[1])}_Create_iterator(e,t,r){return List.Iterator.create(this.ptr_,e,t,r)}front(e){if(0==arguments.length)return this.begin_.value;this.begin_.value=e}back(e){let t=this.end().prev();if(0==arguments.length)return t.value;t.value=e}unique(e=equal_to){let t=this.begin().next();for(;!t.equals(this.end());)t=!0===e(t.value,t.prev().value)?this.erase(t):t.next()}remove(e){return this.remove_if(t=>equal_to(t,e))}remove_if(e){let t=this.begin();for(;!t.equals(this.end());)t=!0===e(t.value)?this.erase(t):t.next()}merge(e,t=less){if(this===e)return;let r=this.begin();for(;!1===e.empty();){let n=e.begin();for(;!r.equals(this.end())&&!0===t(r.value,n.value);)r=r.next();this.splice(r,e,n)}}splice(e,t,r,n){void 0===r?(r=t.begin(),n=t.end()):void 0===n&&(n=r.next()),this.insert(e,r,n),t.erase(r,n)}sort(e=less){this._Quick_sort(this.begin(),this.end().prev(),e)}_Quick_sort(e,t,r){if(!e.equals(t)&&!t.equals(this.end())&&!e.equals(t.next())){let n=this._Quick_sort_partition(e,t,r);this._Quick_sort(e,n.prev(),r),this._Quick_sort(n.next(),t,r)}}_Quick_sort_partition(e,t,r){let n=t.value,s=e.prev(),i=e;for(;!i.equals(t);i=i.next())r(i.value,n)&&(s=s.equals(this.end())?e:s.next(),[s.value,i.value]=[i.value,s.value]);return s=s.equals(this.end())?e:s.next(),[s.value,i.value]=[i.value,s.value],s}reverse(){let e=this.end_.prev(),t=this.begin();for(let e=this.begin();!e.equals(this.end());){let t=e.prev(),r=e.next();List.Iterator._Set_prev(e,r),List.Iterator._Set_next(e,t),e=r}this.begin_=e,List.Iterator._Set_prev(this.end_,t),List.Iterator._Set_next(this.end_,e)}swap(e){super.swap(e),[this.ptr_,e.ptr_]=[e.ptr_,this.ptr_],[this.ptr_.value,e.ptr_.value]=[e.ptr_.value,this.ptr_.value]}};!function(e){let Iterator=class Iterator extends ListIterator{constructor(e,t,r,n){super(t,r,n),this.source_ptr_=e}static create(e,t,r,n){return new Iterator(e,t,r,n)}reverse(){return new ReverseIterator(this)}static _Set_source_ptr(e,t){e.source_ptr_=t}source(){return this.source_ptr_.value}get value(){return this._Try_value(),this.value_}set value(e){this._Try_value(),this.value_=e}equals(e){return this===e}};e.Iterator=Iterator;let ReverseIterator=class ReverseIterator extends T{_Create_neighbor(e){return new ReverseIterator(e)}get value(){return this.base_.value}set value(e){this.base_.value=e}};e.ReverseIterator=ReverseIterator}(List||(List={}));let MapElementList=class MapElementList extends ListContainer{constructor(e){super(),this.associative_=e}_Create_iterator(e,t,r){return MapElementList.Iterator.create(this,e,t,r)}static _Swap_associative(e,t){[e.associative_,t.associative_]=[t.associative_,e.associative_]}associative(){return this.associative_}};!function(e){let Iterator=class Iterator extends ListIterator{constructor(e,t,r,n){super(t,r,n),this.list_=e}static create(e,t,r,n){return new Iterator(e,t,r,n)}reverse(){return new ReverseIterator(this)}source(){return this.list_.associative()}get first(){return this.value.first}get second(){return this.value.second}set second(e){this.value.second=e}};e.Iterator=Iterator;let ReverseIterator=class ReverseIterator extends T{_Create_neighbor(e){return new ReverseIterator(e)}get first(){return this.base_.first}get second(){return this.base_.second}set second(e){this.base_.second=e}};e.ReverseIterator=ReverseIterator}(MapElementList||(MapElementList={}));let XTreeNode=class XTreeNode{constructor(e,t){this.value=e,this.color=t,this.parent=null,this.left=null,this.right=null}get grand(){return this.parent.parent}get sibling(){return this===this.parent.left?this.parent.right:this.parent.left}get uncle(){return this.parent.sibling}};let XTree=class XTree{constructor(e){this.root_=null,this.comp_=e,this.equal_=function(t,r){return!e(t,r)&&!e(r,t)}}clear(){this.root_=null}root(){return this.root_}get(e){let t=this.nearest(e);return null!==t&&this.equal_(e,t.value)?t:null}nearest(e){if(null===this.root_)return null;let t=this.root_;for(;;){let r=null;if(this.comp_(e,t.value))r=t.left;else if(this.comp_(t.value,e))r=t.right;else break;if(null!==r)t=r;else break}return t}_Fetch_maximum(e){for(;null!==e.right;)e=e.right;return e}insert(e){let t=this.nearest(e),r=new XTreeNode(e,1);null===t?this.root_=r:(r.parent=t,this.comp_(r.value,t.value)?t.left=r:t.right=r),this._Insert_case1(r)}_Insert_case1(e){null===e.parent?e.color=0:this._Insert_case2(e)}_Insert_case2(e){0!==this._Fetch_color(e.parent)&&this._Insert_case3(e)}_Insert_case3(e){1===this._Fetch_color(e.uncle)?(e.parent.color=0,e.uncle.color=0,e.grand.color=1,this._Insert_case1(e.grand)):this._Insert_case4(e)}_Insert_case4(e){e===e.parent.right&&e.parent===e.grand.left?(this._Rotate_left(e.parent),e=e.left):e===e.parent.left&&e.parent===e.grand.right&&(this._Rotate_right(e.parent),e=e.right),this._Insert_case5(e)}_Insert_case5(e){e.parent.color=0,e.grand.color=1,e===e.parent.left&&e.parent===e.grand.left?this._Rotate_right(e.grand):this._Rotate_left(e.grand)}erase(e){let t=this.get(e);if(null===t)return;if(null!==t.left&&null!==t.right){let e=this._Fetch_maximum(t.left);t.value=e.value,t=e}let r=null===t.right?t.left:t.right;0===this._Fetch_color(t)&&(t.color=this._Fetch_color(r),this._Erase_case1(t)),this._Replace_node(t,r),1===this._Fetch_color(this.root_)&&(this.root_.color=0)}_Erase_case1(e){null!==e.parent&&this._Erase_case2(e)}_Erase_case2(e){1===this._Fetch_color(e.sibling)&&(e.parent.color=1,e.sibling.color=0,e===e.parent.left?this._Rotate_left(e.parent):this._Rotate_right(e.parent)),this._Erase_case3(e)}_Erase_case3(e){0===this._Fetch_color(e.parent)&&0===this._Fetch_color(e.sibling)&&0===this._Fetch_color(e.sibling.left)&&0===this._Fetch_color(e.sibling.right)?(e.sibling.color=1,this._Erase_case1(e.parent)):this._Erase_case4(e)}_Erase_case4(e){1===this._Fetch_color(e.parent)&&null!==e.sibling&&0===this._Fetch_color(e.sibling)&&0===this._Fetch_color(e.sibling.left)&&0===this._Fetch_color(e.sibling.right)?(e.sibling.color=1,e.parent.color=0):this._Erase_case5(e)}_Erase_case5(e){e===e.parent.left&&null!==e.sibling&&0===this._Fetch_color(e.sibling)&&1===this._Fetch_color(e.sibling.left)&&0===this._Fetch_color(e.sibling.right)?(e.sibling.color=1,e.sibling.left.color=0,this._Rotate_right(e.sibling)):e===e.parent.right&&null!==e.sibling&&0===this._Fetch_color(e.sibling)&&0===this._Fetch_color(e.sibling.left)&&1===this._Fetch_color(e.sibling.right)&&(e.sibling.color=1,e.sibling.right.color=0,this._Rotate_left(e.sibling)),this._Erase_case6(e)}_Erase_case6(e){e.sibling.color=this._Fetch_color(e.parent),e.parent.color=0,e===e.parent.left?(e.sibling.right.color=0,this._Rotate_left(e.parent)):(e.sibling.left.color=0,this._Rotate_right(e.parent))}_Rotate_left(e){let t=e.right;this._Replace_node(e,t),e.right=t.left,null!==t.left&&(t.left.parent=e),t.left=e,e.parent=t}_Rotate_right(e){let t=e.left;this._Replace_node(e,t),e.left=t.right,null!==t.right&&(t.right.parent=e),t.right=e,e.parent=t}_Replace_node(e,t){null===e.parent?this.root_=t:e===e.parent.left?e.parent.left=t:e.parent.right=t,null!==t&&(t.parent=e.parent)}_Fetch_color(e){return null===e?0:e.color}};let MapTree=class MapTree extends XTree{constructor(e,t,r){super(r),this.source_=e,this.key_compare_=t,this.key_eq_=function(e,r){return!t(e,r)&&!t(r,e)},this.value_compare_=function(e,r){return t(e.first,r.first)}}static _Swap_source(e,t){[e.source_,t.source_]=[t.source_,e.source_]}get_by_key(e){let t=this.nearest_by_key(e);return null!==t&&this.key_eq_(e,t.value.first)?t:null}lower_bound(e){let t=this.nearest_by_key(e);return null===t?this.source().end():this.key_comp()(t.value.first,e)?t.value.next():t.value}equal_range(e){return new Pair(this.lower_bound(e),this.upper_bound(e))}source(){return this.source_}key_comp(){return this.key_compare_}key_eq(){return this.key_eq_}value_comp(){return this.value_compare_}};let UniqueMapTree=class UniqueMapTree extends MapTree{constructor(e,t){super(e,t,(e,r)=>t(e.first,r.first))}nearest_by_key(e){if(null===this.root_)return null;let t=this.root_;for(;;){let r=t.value,n=null;if(this.key_comp()(e,r.first))n=t.left;else if(this.key_comp()(r.first,e))n=t.right;else break;if(null===n)break;t=n}return t}upper_bound(e){let t=this.nearest_by_key(e);if(null===t)return this.source().end();let r=t.value;return this.key_comp()(e,r.first)?r:r.next()}};let TreeMap=class TreeMap extends UniqueTreeMap{constructor(...e){super(e=>new MapElementList(e)),k.construct(this,TreeMap,e=>{this.tree_=new UniqueMapTree(this,e)},...e)}clear(){super.clear(),this.tree_.clear()}swap(e){[this.data_,e.data_]=[e.data_,this.data_],MapElementList._Swap_associative(this.data_,e.data_),UniqueMapTree._Swap_source(this.tree_,e.tree_),[this.tree_,e.tree_]=[e.tree_,this.tree_]}key_comp(){return this.tree_.key_comp()}lower_bound(e){return this.tree_.lower_bound(e)}upper_bound(e){return this.tree_.upper_bound(e)}_Handle_insert(e,t){for(;!e.equals(t);e=e.next())this.tree_.insert(e)}_Handle_erase(e,t){for(;!e.equals(t);e=e.next())this.tree_.erase(e)}};(o=TreeMap||(TreeMap={})).Iterator=MapElementList.Iterator,o.ReverseIterator=MapElementList.ReverseIterator;let VectorBoolean=class VectorBoolean extends ArrayContainer{constructor(...e){if(super(),1===e.length&&e[0]instanceof VectorBoolean){let t=e[0];this.data_=new TreeMap(t.data_.begin(),t.data_.end()),this.size_=t.size_}else 1===e.length&&e[0]instanceof Array?(this.clear(),this.push(...e[0])):2===e.length?this.assign(e[0],e[1]):this.clear()}assign(e,t){this.clear(),this.insert(this.end(),e,t)}clear(){this.data_=new TreeMap,this.size_=0}resize(e){let t=e-this.size();t>0?this.insert(this.end(),t,!1):t<0&&this.erase(this.end().advance(-t),this.end())}flip(){for(let e of this.data_)e.second=!e.second}swap(e){[this.data_,e.data_]=[e.data_,this.data_],[this.size_,e.size_]=[e.size_,this.size_]}source(){return this}size(){return this.size_}_At(e){let t=this._Find_node(e);return t.second}_Set(e,t){t=!!t;let r=this._Find_node(e);if(r.second===t||(r.first===e?r.second=t:r=this.data_.emplace(e,t).first,e===this.size()-1))return;let n=r.prev(),s=r.next();not_equal_to(n,this.data_.end())&&n.second===r.second&&this.data_.erase(r),!0===s.equals(this.data_.end())||s.first!==e+1||s.second!==t?this.data_.emplace(e+1,!t):this.data_.erase(s)}nth(e){return new VectorBoolean.Iterator(this,e)}_Find_node(e){return this.data_.upper_bound(e).prev()}push(...e){if(0===e.length)return this.size();let t=new NativeArrayIterator(e,0),r=new NativeArrayIterator(e,e.length);return this._Insert_by_range(this.end(),t,r),this.size()}push_back(e){let t=this.data_.rbegin(),r=this.size_++;e=!!e,(this.data_.empty()||t.second!==e)&&this.data_.emplace(r,e)}_Pop_back(){let e=this.data_.rbegin(),t=--this.size_;e.first===t&&this.data_.erase(e.base())}_Insert_by_repeating_val(e,t,r){let n=[];return(n.push(new Pair(t,r)),!0===e.equals(this.end()))?this._Insert_to_end(n):this._Insert_to_middle(e,n)}_Insert_by_range(e,t,r){let n=[];for(let e=t;!e.equals(r);e=e.next())0===n.length||n[n.length-1].second!==e.value?n.push(new Pair(1,e.value)):++n[n.length-1].first;return!0===e.equals(this.end())?this._Insert_to_end(n):this._Insert_to_middle(e,n)}_Insert_to_middle(e,t){let r=this._Find_node(e.index());for(let n=r;!n.equals(this.data_.end());n=n.next()){let r=n.next(),s=n.first<e.index()?e.index():n.first,i=r.equals(this.data_.end())?this.size():r.first,a=i-s,u=!!n.second;t.push(new Pair(a,u))}return this.size_=e.index(),this.data_.erase(r.first===e.index()?r:r.next(),this.data_.end()),this._Insert_to_end(t)}_Insert_to_end(e){let t=this.size(),r=this.data_.empty()?null:this.data_.rbegin().second;for(let t=0;t<e.length;++t){let n=e[t],s=this.size(),i=!!n.second;this.size_+=n.first,(0!==t||i!==r)&&this.data_.emplace(s,i)}return this.begin().advance(t)}_Erase_by_range(e,t){let r=[];if(!1===t.equals(this.end())){let e=Math.min(this.size(),t.index());for(let t=this._Find_node(e);!t.equals(this.data_.end());t=t.next()){let n=t.next(),s=Math.max(t.first,e),i=n.equals(this.data_.end())?this.size():n.first,a=i-s,u=t.second;r.push(new Pair(a,u))}}return this.size_=e.index(),this.data_.erase(this.data_.lower_bound(this.size_),this.data_.end()),this._Insert_to_end(r)}};(l=VectorBoolean||(VectorBoolean={})).Iterator=ArrayIterator,l.ReverseIterator=ArrayReverseIterator;let ForwardList=class ForwardList{constructor(...e){if(this.ptr_={value:this},this.end_=ForwardList.Iterator.create(this.ptr_,null),this.before_begin_=ForwardList.Iterator.create(this.ptr_,this.end_),this.size_=0,1===e.length&&e[0]instanceof Array){let t=e[0],r=this.before_begin();for(let e of t)r=this.insert_after(r,e)}else 1===e.length&&e[0]instanceof ForwardList?this.assign(e[0].begin(),e[0].end()):2===e.length&&this.assign(e[0],e[1])}assign(e,t){this.clear(),this.insert_after(this.before_begin_,e,t)}clear(){ForwardList.Iterator._Set_next(this.before_begin_,this.end_),this.size_=0}size(){return this.size_}empty(){return 0===this.size_}front(e){let t=this.begin();if(0==arguments.length)return t.value;t.value=e}before_begin(){return this.before_begin_}begin(){return this.before_begin_.next()}end(){return this.end_}[Symbol.iterator](){return new ForOfAdaptor(this.begin(),this.end())}push_front(e){this.insert_after(this.before_begin_,e)}insert_after(e,...t){return 1===t.length?this._Insert_by_repeating_val(e,1,t[0]):"number"==typeof t[0]?this._Insert_by_repeating_val(e,t[0],t[1]):this._Insert_by_range(e,t[0],t[1])}_Insert_by_repeating_val(e,t,r){let n=new Repeater(0,r),s=new Repeater(t);return this._Insert_by_range(e,n,s)}_Insert_by_range(e,t,r){let n=[],s=0;for(;!t.equals(r);t=t.next()){let e=ForwardList.Iterator.create(this.ptr_,null,t.value);n.push(e),++s}if(0===s)return e;for(let e=0;e<s-1;++e)ForwardList.Iterator._Set_next(n[e],n[e+1]);return ForwardList.Iterator._Set_next(n[n.length-1],e.next()),ForwardList.Iterator._Set_next(e,n[0]),this.size_+=s,n[n.length-1]}pop_front(){this.erase_after(this.before_begin())}erase_after(e,t=advance(e,2)){return this.size_-=Math.max(0,distance(e,t)-1),ForwardList.Iterator._Set_next(e,t),t}unique(e=equal_to){for(let t=this.begin().next();!t.equals(this.end());t=t.next()){let r=t.next();if(r.equals(this.end()))break;e(t.value,r.value)&&this.erase_after(t)}}remove(e){return this.remove_if(t=>equal_to(t,e))}remove_if(e){let t=0;for(let r=this.before_begin();!r.next().equals(this.end());r=r.next())!0===e(r.next().value)&&(ForwardList.Iterator._Set_next(r,r.next().next()),++t);this.size_-=t}merge(e,t=less){if(this===e)return;let r=this.before_begin();for(;!1===e.empty();){let n=e.begin().value;for(;!r.next().equals(this.end())&&t(r.next().value,n);)r=r.next();this.splice_after(r,e,e.before_begin())}}splice_after(e,t,r=t.before_begin(),n=r.next().next()){null===n&&(n=t.end()),this.insert_after(e,r.next(),n),t.erase_after(r,n)}sort(e=less){let t=new Vector(this.begin(),this.end());sort$1(t.begin(),t.end(),e),this.assign(t.begin(),t.end())}reverse(){let e=new Vector(this.begin(),this.end());this.assign(e.rbegin(),e.rend())}swap(e){[this.size_,e.size_]=[e.size_,this.size_],[this.before_begin_,e.before_begin_]=[e.before_begin_,this.before_begin_],[this.end_,e.end_]=[e.end_,this.end_],[this.ptr_,e.ptr_]=[e.ptr_,this.ptr_],[this.ptr_.value,e.ptr_.value]=[e.ptr_.value,this.ptr_.value]}toJSON(){let e=[];for(let t of this)e.push(t);return e}};!function(e){let Iterator=class Iterator{constructor(e,t,r){this.source_ptr_=e,this.next_=t,this.value_=r}static create(e,t,r){return new Iterator(e,t,r)}source(){return this.source_ptr_.value}get value(){return this._Try_value(),this.value_}set value(e){this._Try_value(),this.value_=e}_Try_value(){if(void 0===this.value_){let e=this.source();if(!0===this.equals(e.end()))throw y.iterator_end_value(e);if(!0===this.equals(e.before_begin()))throw y.iterator_end_value(e,"before_begin")}}next(){return this.next_}equals(e){return this===e}static _Set_next(e,t){e.next_=t}};e.Iterator=Iterator}(ForwardList||(ForwardList={}));let SetElementList=class SetElementList extends ListContainer{constructor(e){super(),this.associative_=e}_Create_iterator(e,t,r){return SetElementList.Iterator.create(this,e,t,r)}static _Swap_associative(e,t){[e.associative_,t.associative_]=[t.associative_,e.associative_]}associative(){return this.associative_}};!function(e){let Iterator=class Iterator extends ListIterator{constructor(e,t,r,n){super(t,r,n),this.source_=e}static create(e,t,r,n){return new Iterator(e,t,r,n)}reverse(){return new ReverseIterator(this)}source(){return this.source_.associative()}};e.Iterator=Iterator;let ReverseIterator=class ReverseIterator extends T{_Create_neighbor(e){return new ReverseIterator(e)}};e.ReverseIterator=ReverseIterator}(SetElementList||(SetElementList={}));let SetTree=class SetTree extends XTree{constructor(e,t,r){super(r),this.source_=e,this.key_comp_=t,this.key_eq_=(e,r)=>!t(e,r)&&!t(r,e)}static _Swap_source(e,t){[e.source_,t.source_]=[t.source_,e.source_]}get_by_key(e){let t=this.nearest_by_key(e);return null!==t&&this.key_eq_(e,t.value.value)?t:null}lower_bound(e){let t=this.nearest_by_key(e);return null===t?this.source_.end():this.key_comp_(t.value.value,e)?t.value.next():t.value}equal_range(e){return new Pair(this.lower_bound(e),this.upper_bound(e))}source(){return this.source_}key_comp(){return this.key_comp_}key_eq(){return this.key_eq_}value_comp(){return this.key_comp_}};let UniqueSetTree=class UniqueSetTree extends SetTree{constructor(e,t){super(e,t,(e,r)=>t(e.value,r.value))}nearest_by_key(e){if(null===this.root_)return null;let t=this.root_;for(;;){let r=t.value,n=null;if(this.key_comp()(e,r.value))n=t.left;else if(this.key_comp()(r.value,e))n=t.right;else break;if(null===n)break;t=n}return t}upper_bound(e){let t=this.nearest_by_key(e);if(null===t)return this.source().end();let r=t.value;return this.key_comp()(e,r.value)?r:r.next()}};let TreeSet=class TreeSet extends UniqueTreeSet{constructor(...e){super(e=>new SetElementList(e)),k.construct(this,TreeSet,e=>{this.tree_=new UniqueSetTree(this,e)},...e)}clear(){super.clear(),this.tree_.clear()}swap(e){[this.data_,e.data_]=[e.data_,this.data_],SetElementList._Swap_associative(this.data_,e.data_),UniqueSetTree._Swap_source(this.tree_,e.tree_),[this.tree_,e.tree_]=[e.tree_,this.tree_]}key_comp(){return this.tree_.key_comp()}lower_bound(e){return this.tree_.lower_bound(e)}upper_bound(e){return this.tree_.upper_bound(e)}_Handle_insert(e,t){for(;!e.equals(t);e=e.next())this.tree_.insert(e)}_Handle_erase(e,t){for(;!e.equals(t);e=e.next())this.tree_.erase(e)}};(c=TreeSet||(TreeSet={})).Iterator=SetElementList.Iterator,c.ReverseIterator=SetElementList.ReverseIterator,(w||(w={})).construct=function(e,t,r,...n){let s=null,i=hash,a=equal_to;if(1===n.length&&n[0]instanceof t){let t=n[0];i=t.hash_function(),a=t.key_eq(),s=()=>{let r=t.begin(),n=t.end();e.assign(r,n)}}else{let t=x.construct(e,...n);s=t.ramda,t.tail.length>=1&&(i=t.tail[0]),t.tail.length>=2&&(a=t.tail[1])}r(i,a),null!==s&&s()};let HashBuckets=class HashBuckets{constructor(e,t){this.fetcher_=e,this.hasher_=t,this.max_load_factor_=C,this.data_=[],this.size_=0,this.initialize()}clear(){this.data_=[],this.size_=0,this.initialize()}rehash(e){e=Math.max(e,F);let t=[];for(let r=0;r<e;++r)t.push([]);for(let e of this.data_)for(let r of e){let e=this.hasher_(this.fetcher_(r))%t.length;t[e].push(r)}this.data_=t}reserve(e){e>this.capacity()&&(e=Math.floor(e/this.max_load_factor_),this.rehash(e))}initialize(){for(let e=0;e<F;++e)this.data_.push([])}length(){return this.data_.length}capacity(){return this.data_.length*this.max_load_factor_}at(e){return this.data_[e]}load_factor(){return this.size_/this.length()}max_load_factor(e=null){if(null===e)return this.max_load_factor_;this.max_load_factor_=e}hash_function(){return this.hasher_}index(e){return this.hasher_(this.fetcher_(e))%this.length()}insert(e){let t=this.capacity();++this.size_>t&&this.reserve(2*t);let r=this.index(e);this.data_[r].push(e)}erase(e){let t=this.index(e),r=this.data_[t];for(let t=0;t<r.length;++t)if(r[t]===e){r.splice(t,1),--this.size_;break}}};let F=10,C=1;let SetHashBuckets=class SetHashBuckets extends HashBuckets{constructor(e,t,r){super(fetcher$1,t),this.source_=e,this.key_eq_=r}static _Swap_source(e,t){[e.source_,t.source_]=[t.source_,e.source_]}key_eq(){return this.key_eq_}find(e){let t=this.hash_function()(e)%this.length(),r=this.at(t);for(let t of r)if(this.key_eq_(t.value,e))return t;return this.source_.end()}};function fetcher$1(e){return e.value}let HashSet=class HashSet extends UniqueSet{constructor(...e){super(e=>new SetElementList(e)),w.construct(this,HashSet,(e,t)=>{this.buckets_=new SetHashBuckets(this,e,t)},...e)}clear(){this.buckets_.clear(),super.clear()}swap(e){[this.data_,e.data_]=[e.data_,this.data_],SetElementList._Swap_associative(this.data_,e.data_),SetHashBuckets._Swap_source(this.buckets_,e.buckets_),[this.buckets_,e.buckets_]=[e.buckets_,this.buckets_]}find(e){return this.buckets_.find(e)}begin(e=null){return null===e?super.begin():this.buckets_.at(e)[0]}end(e=null){if(null===e)return super.end();{let t=this.buckets_.at(e);return t[t.length-1].next()}}rbegin(e=null){return this.end(e).reverse()}rend(e=null){return this.begin(e).reverse()}bucket_count(){return this.buckets_.length()}bucket_size(e){return this.buckets_.at(e).length}load_factor(){return this.buckets_.load_factor()}hash_function(){return this.buckets_.hash_function()}key_eq(){return this.buckets_.key_eq()}bucket(e){return this.hash_function()(e)%this.buckets_.length()}max_load_factor(e=null){return this.buckets_.max_load_factor(e)}reserve(e){this.buckets_.reserve(e)}rehash(e){this.buckets_.rehash(e)}_Insert_by_key(e){let t=this.find(e);return!1===t.equals(this.end())?new Pair(t,!1):(this.data_.push(e),t=t.prev(),this._Handle_insert(t,t.next()),new Pair(t,!0))}_Insert_by_hint(e,t){let r=this.find(t);return!0===r.equals(this.end())&&(r=this.data_.insert(e,t),this._Handle_insert(r,r.next())),r}_Handle_insert(e,t){for(;!e.equals(t);e=e.next())this.buckets_.insert(e)}_Handle_erase(e,t){for(;!e.equals(t);e=e.next())this.buckets_.erase(e)}};(h=HashSet||(HashSet={})).Iterator=SetElementList.Iterator,h.ReverseIterator=SetElementList.ReverseIterator;let MultiSetTree=class MultiSetTree extends SetTree{constructor(e,t){super(e,t,function(e,r){let n=t(e.value,r.value);return n||t(r.value,e.value)?n:get_uid(e)<get_uid(r)})}insert(e){get_uid(e),super.insert(e)}_Nearest_by_key(e,t){if(null===this.root_)return null;let r=this.root_,n=null;for(;;){let s=r.value,i=null;if(this.key_comp()(e,s.value)?i=r.left:this.key_comp()(s.value,e)?i=r.right:(n=r,i=t(r)),null===i)break;r=i}return null!==n?n:r}nearest_by_key(e){return this._Nearest_by_key(e,function(e){return e.left})}upper_bound(e){let t=this._Nearest_by_key(e,function(e){return e.right});if(null===t)return this.source().end();let r=t.value;return this.key_comp()(e,r.value)?r:r.next()}};let TreeMultiSet=class TreeMultiSet extends MultiTreeSet{constructor(...e){super(e=>new SetElementList(e)),k.construct(this,TreeMultiSet,e=>{this.tree_=new MultiSetTree(this,e)},...e)}clear(){super.clear(),this.tree_.clear()}swap(e){[this.data_,e.data_]=[e.data_,this.data_],SetElementList._Swap_associative(this.data_,e.data_),MultiSetTree._Swap_source(this.tree_,e.tree_),[this.tree_,e.tree_]=[e.tree_,this.tree_]}key_comp(){return this.tree_.key_comp()}lower_bound(e){return this.tree_.lower_bound(e)}upper_bound(e){return this.tree_.upper_bound(e)}_Handle_insert(e,t){for(;!e.equals(t);e=e.next())this.tree_.insert(e)}_Handle_erase(e,t){for(;!e.equals(t);e=e.next())this.tree_.erase(e)}};(d=TreeMultiSet||(TreeMultiSet={})).Iterator=SetElementList.Iterator,d.ReverseIterator=SetElementList.ReverseIterator;let HashMultiSet=class HashMultiSet extends MultiSet{constructor(...e){super(e=>new SetElementList(e)),w.construct(this,HashMultiSet,(e,t)=>{this.buckets_=new SetHashBuckets(this,e,t)},...e)}clear(){this.buckets_.clear(),super.clear()}swap(e){[this.data_,e.data_]=[e.data_,this.data_],SetElementList._Swap_associative(this.data_,e.data_),SetHashBuckets._Swap_source(this.buckets_,e.buckets_),[this.buckets_,e.buckets_]=[e.buckets_,this.buckets_]}find(e){return this.buckets_.find(e)}count(e){let t=this.bucket(e),r=this.buckets_.at(t),n=0;for(let t of r)this.buckets_.key_eq()(t.value,e)&&++n;return n}begin(e=null){return null===e?super.begin():this.buckets_.at(e)[0]}end(e=null){if(null===e)return super.end();{let t=this.buckets_.at(e);return t[t.length-1].next()}}rbegin(e=null){return this.end(e).reverse()}rend(e=null){return this.begin(e).reverse()}bucket_count(){return this.buckets_.length()}bucket_size(e){return this.buckets_.at(e).length}load_factor(){return this.buckets_.load_factor()}hash_function(){return this.buckets_.hash_function()}key_eq(){return this.buckets_.key_eq()}bucket(e){return this.hash_function()(e)%this.buckets_.length()}max_load_factor(e=null){return this.buckets_.max_load_factor(e)}reserve(e){this.buckets_.rehash(Math.ceil(e*this.max_load_factor()))}rehash(e){e<=this.bucket_count()||this.buckets_.rehash(e)}_Key_eq(e,t){return this.key_eq()(e,t)}_Insert_by_key(e){let t=this.data_.insert(this.data_.end(),e);return this._Handle_insert(t,t.next()),t}_Insert_by_hint(e,t){let r=this.data_.insert(e,t);return this._Handle_insert(r,r.next()),r}_Insert_by_range(e,t){let r=this.data_.insert(this.data_.end(),e,t);this.size()>this.buckets_.capacity()&&this.reserve(Math.max(this.size(),2*this.buckets_.capacity())),this._Handle_insert(r,this.end())}_Handle_insert(e,t){for(;!e.equals(t);e=e.next())this.buckets_.insert(e)}_Handle_erase(e,t){for(;!e.equals(t);e=e.next())this.buckets_.erase(e)}};(f=HashMultiSet||(HashMultiSet={})).Iterator=SetElementList.Iterator,f.ReverseIterator=SetElementList.ReverseIterator;let MapHashBuckets=class MapHashBuckets extends HashBuckets{constructor(e,t,r){super(fetcher,t),this.source_=e,this.key_eq_=r}static _Swap_source(e,t){[e.source_,t.source_]=[t.source_,e.source_]}key_eq(){return this.key_eq_}find(e){let t=this.hash_function()(e)%this.length(),r=this.at(t);for(let t of r)if(this.key_eq_(t.first,e))return t;return this.source_.end()}};function fetcher(e){return e.first}let HashMap=class HashMap extends UniqueMap{constructor(...e){super(e=>new MapElementList(e)),w.construct(this,HashMap,(e,t)=>{this.buckets_=new MapHashBuckets(this,e,t)},...e)}clear(){this.buckets_.clear(),super.clear()}swap(e){[this.data_,e.data_]=[e.data_,this.data_],MapElementList._Swap_associative(this.data_,e.data_),MapHashBuckets._Swap_source(this.buckets_,e.buckets_),[this.buckets_,e.buckets_]=[e.buckets_,this.buckets_]}find(e){return this.buckets_.find(e)}begin(e=null){return null===e?super.begin():this.buckets_.at(e)[0]}end(e=null){if(null===e)return super.end();{let t=this.buckets_.at(e);return t[t.length-1].next()}}rbegin(e=null){return this.end(e).reverse()}rend(e=null){return this.begin(e).reverse()}bucket_count(){return this.buckets_.length()}bucket_size(e){return this.buckets_.at(e).length}load_factor(){return this.buckets_.load_factor()}hash_function(){return this.buckets_.hash_function()}key_eq(){return this.buckets_.key_eq()}bucket(e){return this.hash_function()(e)%this.buckets_.length()}max_load_factor(e=null){return this.buckets_.max_load_factor(e)}reserve(e){this.buckets_.reserve(e)}rehash(e){this.buckets_.rehash(e)}emplace(e,t){let r=this.find(e);return!1===r.equals(this.end())?new Pair(r,!1):(this.data_.push(new Entry(e,t)),r=r.prev(),this._Handle_insert(r,r.next()),new Pair(r,!0))}emplace_hint(e,t,r){let n=this.find(t);return!0===n.equals(this.end())&&(n=this.data_.insert(e,new Entry(t,r)),this._Handle_insert(n,n.next())),n}_Handle_insert(e,t){for(;!e.equals(t);e=e.next())this.buckets_.insert(e)}_Handle_erase(e,t){for(;!e.equals(t);e=e.next())this.buckets_.erase(e)}};(p=HashMap||(HashMap={})).Iterator=MapElementList.Iterator,p.ReverseIterator=MapElementList.ReverseIterator;let MultiMapTree=class MultiMapTree extends MapTree{constructor(e,t){super(e,t,function(e,r){let n=t(e.first,r.first);return n||t(r.first,e.first)?n:get_uid(e)<get_uid(r)})}insert(e){get_uid(e),super.insert(e)}_Nearest_by_key(e,t){if(null===this.root_)return null;let r=this.root_,n=null;for(;;){let s=r.value,i=null;if(this.key_comp()(e,s.first)?i=r.left:this.key_comp()(s.first,e)?i=r.right:(n=r,i=t(r)),null===i)break;r=i}return null!==n?n:r}nearest_by_key(e){return this._Nearest_by_key(e,function(e){return e.left})}upper_bound(e){let t=this._Nearest_by_key(e,function(e){return e.right});if(null===t)return this.source().end();let r=t.value;return this.key_comp()(e,r.first)?r:r.next()}};let TreeMultiMap=class TreeMultiMap extends MultiTreeMap{constructor(...e){super(e=>new MapElementList(e)),k.construct(this,TreeMultiMap,e=>{this.tree_=new MultiMapTree(this,e)},...e)}clear(){super.clear(),this.tree_.clear()}swap(e){[this.data_,e.data_]=[e.data_,this.data_],MapElementList._Swap_associative(this.data_,e.data_),MultiMapTree._Swap_source(this.tree_,e.tree_),[this.tree_,e.tree_]=[e.tree_,this.tree_]}key_comp(){return this.tree_.key_comp()}lower_bound(e){return this.tree_.lower_bound(e)}upper_bound(e){return this.tree_.upper_bound(e)}_Handle_insert(e,t){for(;!e.equals(t);e=e.next())this.tree_.insert(e)}_Handle_erase(e,t){for(;!e.equals(t);e=e.next())this.tree_.erase(e)}};(g=TreeMultiMap||(TreeMultiMap={})).Iterator=MapElementList.Iterator,g.ReverseIterator=MapElementList.ReverseIterator;let HashMultiMap=class HashMultiMap extends MultiMap{constructor(...e){super(e=>new MapElementList(e)),w.construct(this,HashMultiMap,(e,t)=>{this.buckets_=new MapHashBuckets(this,e,t)},...e)}clear(){this.buckets_.clear(),super.clear()}swap(e){[this.data_,e.data_]=[e.data_,this.data_],MapElementList._Swap_associative(this.data_,e.data_),MapHashBuckets._Swap_source(this.buckets_,e.buckets_),[this.buckets_,e.buckets_]=[e.buckets_,this.buckets_]}find(e){return this.buckets_.find(e)}count(e){let t=this.bucket(e),r=this.buckets_.at(t),n=0;for(let t of r)this.buckets_.key_eq()(t.first,e)&&++n;return n}begin(e=null){return null===e?super.begin():this.buckets_.at(e)[0]}end(e=null){if(null===e)return super.end();{let t=this.buckets_.at(e);return t[t.length-1].next()}}rbegin(e=null){return this.end(e).reverse()}rend(e=null){return this.begin(e).reverse()}bucket_count(){return this.buckets_.length()}bucket_size(e){return this.buckets_.at(e).length}load_factor(){return this.buckets_.load_factor()}hash_function(){return this.buckets_.hash_function()}key_eq(){return this.buckets_.key_eq()}bucket(e){return this.hash_function()(e)%this.buckets_.length()}max_load_factor(e=null){return this.buckets_.max_load_factor(e)}reserve(e){this.buckets_.reserve(e)}rehash(e){e<=this.bucket_count()||this.buckets_.rehash(e)}_Key_eq(e,t){return this.key_eq()(e,t)}emplace(e,t){let r=this.data_.insert(this.data_.end(),new Entry(e,t));return this._Handle_insert(r,r.next()),r}emplace_hint(e,t,r){let n=this.data_.insert(e,new Entry(t,r));return this._Handle_insert(n,n.next()),n}_Insert_by_range(e,t){let r=[];for(let n=e;!n.equals(t);n=n.next())r.push(new Entry(n.value.first,n.value.second));let n=this.data_.insert(this.data_.end(),new NativeArrayIterator(r,0),new NativeArrayIterator(r,r.length));this.size()>this.buckets_.capacity()&&this.reserve(Math.max(this.size(),2*this.buckets_.capacity())),this._Handle_insert(n,this.end())}_Handle_insert(e,t){for(;!e.equals(t);e=e.next())this.buckets_.insert(e)}_Handle_erase(e,t){for(;!e.equals(t);e=e.next())this.buckets_.erase(e)}};(v=HashMultiMap||(HashMultiMap={})).Iterator=MapElementList.Iterator,v.ReverseIterator=MapElementList.ReverseIterator;let AdaptorContainer=class AdaptorContainer{constructor(e){this.source_=e}size(){return this.source_.size()}empty(){return this.source_.empty()}push(...e){return this.source_.push(...e)}swap(e){[this.source_,e.source_]=[e.source_,this.source_]}};let PriorityQueue=class PriorityQueue extends AdaptorContainer{constructor(...e){super(new Vector);let t=less,r=null;if(1===e.length&&e[0]instanceof PriorityQueue){let n=e[0];t=n.comp_,r=()=>{let e=n.source_.begin(),t=n.source_.end();this.source_.assign(e,t)}}else e.length>=2&&e[0].next instanceof Function&&e[1].next instanceof Function?(3===e.length&&(t=e[2]),r=()=>{let t=e[0],r=e[1];this.source_.assign(t,r)}):1===e.length&&(t=e[0]);this.comp_=t,null!==r&&r()}value_comp(){return this.comp_}top(){return this.source_.front()}push(...e){for(let t of e)this.source_.push_back(t),push_heap$1(this.source_.begin(),this.source_.end(),this.comp_);return this.size()}pop(){pop_heap$1(this.source_.begin(),this.source_.end(),this.comp_),this.source_.pop_back()}swap(e){super.swap(e),[this.comp_,e.comp_]=[e.comp_,this.comp_]}};let DomainError=class DomainError extends LogicError{constructor(e){super(e)}};let ErrorInstance=class ErrorInstance{constructor(e=0,t=null){this.assign(e,t)}assign(e,t){this.category_=t,this.value_=e}clear(){this.value_=0}category(){return this.category_}value(){return this.value_}message(){return this.category_.message(this.value_)}to_bool(){return 0!==this.value_}toJSON(){return null===this.category_?{}:{cateogory:this.category_.name(),value:this.value(),message:this.message()}}};let ErrorCode=class ErrorCode extends ErrorInstance{constructor(e=0,t=null){super(e,t)}default_error_condition(){return this.category_.default_error_condition(this.value_)}};let ErrorCondition=class ErrorCondition extends ErrorInstance{constructor(e=0,t=null){super(e,t)}};function tgamma(e){if(e<.5)return Math.PI/(Math.sin(Math.PI*e)*tgamma(1-e));e-=1;let t=A[0],r=e+H+.5;for(let r=1;r<A.length;++r)t+=A[r]/(e+r);return Math.sqrt(2*Math.PI)*Math.pow(r,e+.5)*Math.exp(-r)*t}let A=[.9999999999998099,676.5203681218851,-1259.1392167224028,771.3234287776531,-176.6150291621406,12.507343278686905,-.13857109526572012,9984369578019572e-21,15056327351493116e-23],H=7;function cyl_bessel_j(e,t){if(t<0&&Math.floor(e)!==e)throw new InvalidArgument(`Error on std.cyl_bessel_j(): n must be integer when x is negative -> (n = ${e}, x = ${t}).`);if(0===t&&0!==e)throw new InvalidArgument(`Error on std.cyl_bessel_j(): n must be zero when x is zero -> (n = ${e}, x = ${t}).`);return e===Math.floor(e)&&e<0?Math.pow(-1,e)*_J_positive(-e,t):_J_positive(e,t)}function cyl_neumann(e,t){if(t<=0)throw new InvalidArgument(`Error on std.cyl_neumann(): x must be greater than zero -> (x = ${t}).`);let r=cyl_bessel_j(e,t)*Math.cos(e*Math.PI)-cyl_bessel_j(-e,t),n=Math.sin(e*Math.PI);return r/n}function _J_positive(e,t){let r=q.sigma(function(r){return Math.pow(-1,r)*Math.pow(t/2,e+2*r)/(q.factorial(r)*tgamma(e+r+1))},0,100);return r}function cyl_bessel_i(e,t){if(t<0&&Math.floor(e)!==e)throw new InvalidArgument(`Error on std.cyl_bessel_i(): n must be integer when x is negative -> (n = ${e}, x = ${t}).`);if(0===t&&0!==e)throw new InvalidArgument(`Error on std.cyl_bessel_i(): n must be zero when x is zero -> (n = ${e}, x = ${t}).`);return .5===e?Math.sqrt(2/(Math.PI*t))*Math.sinh(t):q.sigma(function(r){let n=Math.pow(t/2,e+2*r),s=q.factorial(r)*tgamma(e+r+1);return n/s},0,100)}function ellint_1(e,t){return _Post_process("ellint_1",e,t,function(t){return 1/_Common_formula(e,t)})}function ellint_2(e,t){return _Post_process("ellint_2",e,t,function(t){return _Common_formula(e,t)})}function ellint_3(e,t,r){let n=1/Math.pow(Math.sin(r),2);if(t>n)throw new InvalidArgument(`Error on std.ellint_3(): must be v < (1 / sin^2(phi)) -> (v = ${t}, 1 / sin^2(phi) = ${n}).`);return _Post_process("ellint_3",e,r,function(r){let n=1-t*Math.pow(Math.sin(r),2);return 1/(n*=_Common_formula(e,r))})}function _Common_formula(e,t){return Math.sqrt(1-Math.pow(e*Math.sin(t),2))}function _Post_process(e,t,r,n){if(Math.abs(t)>1)throw new InvalidArgument(`Error on std.${e}(): must be |k| <= 1 -> (k = ${t}).`);let s=q.integral(n,0,r);return r<0?-s:s}!function(e){e.factorial=function(e){if(t.length<=e)for(let r=t.length;r<=e;++r)t.push(t[r-1]*r);return t[e]},e.integral=function(e,t,r,n=1e5){if(t>r)[t,r]=[r,t];else if(t===r)return 0;let s=(r-t)/n,i=0;for(;t<r;t+=s)i+=e(t)*s;return i},e.sigma=function(e,t,r){let n=0;for(;t<=r;++t)n+=e(t);return n};let t=[1,1]}(q||(q={}));let P=Math.sqrt(2*.43854051643311487/.8076822154465769),O=.43854051643311487*(.31523675168719334-3.368756901401311+12)/(3.4856507739670834*P);function assoc_legendre(e,t,r){if((e=Math.floor(e))<0||(t=Math.floor(t))<0)throw new InvalidArgument(`Error on std.assoc_legendre(): both n and m must be unsigned integer -> (n = ${e}, m = ${t}).`);if(Math.abs(r)>1)throw new InvalidArgument(`Error on std.assoc_legendre(): must be |x| <= 1 -> (x = ${r}).`);let n=[[1,r]];n.length=t+1;for(let e=1;e<n.length;++e)n[e]=[];return function _Compute_assoc_legendre(e,t,r,n){if(e<0&&(e=-e-1),0===t)return function _Compute_legendre(e,t,r){if(r.length>e)return r[e];let n=_Compute_legendre(e-1,t,r),s=_Compute_legendre(e-2,t,r),i=(2*e-1)*t*n-(e-1)*s;return i/=e,r[e]=i,i}(e,r,n[0]);if(n[t].length>e&&void 0!==n[t][e])return n[t][e];let s=(e-t+1)*(e-t+2)*_Compute_assoc_legendre(e+1,t-1,r,n),i=(e+t-1)*(e+t)*_Compute_assoc_legendre(e-1,t-1,r,n),a=(s-i)/(2*e+1);return a/=Math.sqrt(1-r*r),n[t][e]=a,a}(e,t,r,n)}function assoc_laguerre(e,t,r){if((e=Math.floor(e))<0||(t=Math.floor(t))<0)throw new InvalidArgument(`Error on std.assoc_laguerre(): both n and m must be unsigned integer -> (n = ${e}, m = ${t}).`);let n=[1,-r+t+1];return function _Compute_assoc_laguerre(e,t,r,n){if(n.length>e)return n[e];let s=_Compute_assoc_laguerre(e-1,t,r,n),i=_Compute_assoc_laguerre(e-2,t,r,n),a=(2*e-1+t-r)*s-(e+t-1)*i;return a/=e,n[e]=a,a}(e,t,r,n)}function sleep_for(e){return new Promise(t=>{setTimeout(t,e)})}function sleep_until(e){let t=new Date,r=e.getTime()-t.getTime();return sleep_for(r)}async function lock(...e){let t=[];for(let r of e)t.push(r.lock());await Promise.all(t)}async function try_lock(...e){for(let t=0;t<e.length;++t)if(await e[t].try_lock()===!1)return t;return -1}let SharedTimedMutex=class SharedTimedMutex{constructor(e=null){this.source_=null!==e?e:this,this.queue_=new List,this.writing_=0,this.reading_=0}_Current_access_type(){return this.queue_.empty()?null:this.queue_.front().accessType}lock(){return new Promise(e=>{let t={handler:0==this.writing_++&&0===this.reading_?null:e,accessType:0,lockType:0};this.queue_.push_back(t),null===t.handler&&e()})}async try_lock(){return 0===this.writing_&&0===this.reading_&&(this.queue_.push_back({handler:null,accessType:0,lockType:1}),++this.writing_,!0)}try_lock_for(e){return new Promise(t=>{let r=this.queue_.insert(this.queue_.end(),{handler:0==this.writing_++&&0===this.reading_?null:t,accessType:0,lockType:1});null===r.value.handler?t(!0):sleep_for(e).then(()=>{null!==r.value.handler&&(--this.writing_,this._Cancel(r))})})}async try_lock_until(e){let t=new Date,r=e.getTime()-t.getTime();return await this.try_lock_for(r)}async unlock(){if(0!==this._Current_access_type())throw new InvalidArgument(`Error on std.${this.source_.constructor.name}.unlock(): this mutex is free on the unique lock.`);--this.writing_,this.queue_.pop_front(),this._Release()}lock_shared(){return new Promise(e=>{let t={handler:0===this.writing_?null:e,accessType:1,lockType:0};this.queue_.push_back(t),++this.reading_,null===t.handler&&e()})}async try_lock_shared(){return 0===this.writing_&&(++this.reading_,this.queue_.push_back({handler:null,accessType:1,lockType:1}),!0)}try_lock_shared_for(e){return new Promise(t=>{let r=this.queue_.insert(this.queue_.end(),{handler:0===this.writing_?null:t,accessType:1,lockType:1});++this.reading_,null===r.value.handler?t(!0):sleep_for(e).then(()=>{null!==r.value.handler&&(--this.reading_,this._Cancel(r))})})}async try_lock_shared_until(e){let t=new Date,r=e.getTime()-t.getTime();return await this.try_lock_shared_for(r)}async unlock_shared(){if(1!==this._Current_access_type())throw new InvalidArgument(`Error on std.${this.source_.constructor.name}.unlock_shared(): this mutex is free on the shared lock.`);--this.reading_,this.queue_.pop_front(),this._Release()}_Release(){let e=this._Current_access_type(),t=[];for(let r of this.queue_)if(r.accessType!==e||(null!==r.handler&&(t.push({...r}),r.handler=null),0===r.accessType))break;for(let e of t)0===e.lockType?e.handler():e.handler(!0)}_Cancel(e){this.queue_.erase(e);let t=e.value.handler;e.value.handler=null;let r=e.prev();!1===r.equals(this.queue_.end())&&null===r.value.handler&&this._Release(),t(!1)}};let SharedMutex=class SharedMutex{constructor(){this.mutex_=new SharedTimedMutex(this)}lock(){return this.mutex_.lock()}try_lock(){return this.mutex_.try_lock()}unlock(){return this.mutex_.unlock()}lock_shared(){return this.mutex_.lock_shared()}try_lock_shared(){return this.mutex_.try_lock_shared()}unlock_shared(){return this.mutex_.unlock_shared()}};let ConditionVariable=class ConditionVariable{constructor(){this.resolvers_=new List}async wait(e){if(!e)return await this._Wait();for(;!await e();)await this._Wait()}wait_for(e,t){let r=new Date(Date.now()+e);return this.wait_until(r,t)}async wait_until(e,t){if(!t)return await this._Wait_until(e);for(;!await t();)if(!await this._Wait_until(e))return await t();return!0}_Wait(){return new Promise(e=>{this.resolvers_.push_back({handler:e,lockType:0})})}_Wait_until(e){return new Promise(t=>{let r=this.resolvers_.insert(this.resolvers_.end(),{handler:t,lockType:1});sleep_until(e).then(()=>{!0!==r.erased_&&(this.resolvers_.erase(r),t(!1))})})}async notify_one(){if(this.resolvers_.empty())return;let e=this.resolvers_.begin();this.resolvers_.erase(e),0===e.value.lockType?e.value.handler():e.value.handler(!0)}async notify_all(){if(this.resolvers_.empty())return;let e=this.resolvers_.toJSON();for(let t of(this.resolvers_.clear(),e))0===t.lockType?t.handler():t.handler(!0)}};!function(e){async function lock(e,t,r){await e(),await _Process(t,r)}async function try_lock(e,t,r){return await e()!==!1&&(await _Process(t,r),!0)}async function _Process(e,t){try{await t()}catch(t){throw await e(),t}await e()}e.lock=lock,e.try_lock=try_lock}($||($={}));let UniqueLock=class UniqueLock{};(m=UniqueLock||(UniqueLock={})).lock=function(e,t){return $.lock(()=>e.lock(),()=>e.unlock(),t)},m.try_lock=function(e,t){return $.try_lock(()=>e.try_lock(),()=>e.unlock(),t)},m.try_lock_for=function(e,t,r){return $.try_lock(()=>e.try_lock_for(t),()=>e.unlock(),r)},m.try_lock_until=function(e,t,r){return $.try_lock(()=>e.try_lock_until(t),()=>e.unlock(),r)};let SharedLock=class SharedLock{};(b=SharedLock||(SharedLock={})).lock=function(e,t){return $.lock(()=>e.lock_shared(),()=>e.unlock_shared(),t)},b.try_lock=function(e,t){return $.try_lock(()=>e.try_lock_shared(),()=>e.unlock_shared(),t)},b.try_lock_for=function(e,t,r){return $.try_lock(()=>e.try_lock_shared_for(t),()=>e.unlock_shared(),r)},b.try_lock_until=function(e,t,r){return $.try_lock(()=>e.try_lock_shared_until(t),()=>e.unlock_shared(),r)};let Semaphore=class Semaphore{constructor(e){this.queue_=new List,this.acquiring_=0,this.max_=e}max(){return this.max_}acquire(){return new Promise(e=>{this.acquiring_<this.max_?(++this.acquiring_,e()):this.queue_.push_back({handler:e,lockType:0})})}async try_acquire(){return this.acquiring_<this.max_&&(++this.acquiring_,!0)}async try_acquire_for(e){return new Promise(t=>{if(this.acquiring_<this.max_)++this.acquiring_,t(!0);else{let r=this.queue_.insert(this.queue_.end(),{handler:t,lockType:1});sleep_for(e).then(()=>{null!==r.value.handler&&this._Cancel(r)})}})}try_acquire_until(e){let t=new Date,r=e.getTime()-t.getTime();return this.try_acquire_for(r)}async release(e=1){if(e<1)throw new InvalidArgument(`Error on std.Semaphore.release(): parametric n is less than 1 -> (n = ${e}).`);if(e>this.max_)throw new OutOfRange(`Error on std.Semaphore.release(): parametric n is greater than max -> (n = ${e}, max = ${this.max_}).`);if(e>this.acquiring_)throw new OutOfRange(`Error on std.Semaphore.release(): parametric n is greater than acquiring -> (n = ${e}, acquiring = ${this.acquiring_}).`);let t=[];for(;!1===this.queue_.empty()&&t.length<e;){let e=this.queue_.front();null!==e.handler&&t.push({...e}),this.queue_.pop_front(),e.handler=null}for(let r of(this.acquiring_-=e-t.length,t))0===r.lockType?r.handler():r.handler(!0)}_Cancel(e){let t=e.value.handler;e.value.handler=null,this.queue_.erase(e),t(!1)}};!function(e){e.get_lockable=function(e){return new Lockable(e)};let Lockable=class Lockable{constructor(e){this.semahpore_=e}lock(){return this.semahpore_.acquire()}unlock(){return this.semahpore_.release()}try_lock(){return this.semahpore_.try_acquire()}try_lock_for(e){return this.semahpore_.try_acquire_for(e)}try_lock_until(e){return this.semahpore_.try_acquire_until(e)}};e.Lockable=Lockable}(Semaphore||(Semaphore={}));let MutableSingleton=class MutableSingleton{constructor(e){this.closure_=e,this.mutex_=new SharedMutex,this.value_=V}async reload(...e){let t;return await UniqueLock.lock(this.mutex_,async()=>{t=await this.closure_(...e),this.value_=t}),t}async set(e){await UniqueLock.lock(this.mutex_,()=>{this.value_=e})}async clear(){await UniqueLock.lock(this.mutex_,()=>{this.value_=V})}async get(...e){let t=V;return await SharedLock.lock(this.mutex_,async()=>{t=this.value_}),t===V&&await UniqueLock.lock(this.mutex_,async()=>{if(this.value_!==V){t=this.value_;return}t=await this.closure_(...e),this.value_=t}),t}async is_loaded(){let e=!1;return await SharedLock.lock(this.mutex_,async()=>{e=this.value_!==V}),e}};let V={};let TimedSingleton=class TimedSingleton{constructor(e,t){this.interval_=e,this.closure_=t,this.value_=null,this.expired_at_=0}get(...e){return Date.now()>=this.expired_at_&&(this.expired_at_=Date.now()+this.interval_,this.value_=this.closure_(...e)),this.value_}};let Singleton=class Singleton{constructor(e){this.closure_=e,this.value_=D}get(...e){return this.value_===D&&(this.value_=this.closure_(...e)),this.value_}};let D={};Object.freeze({__proto__:null,BackInsertIterator,Barrier:class{constructor(e){this.cv_=new ConditionVariable,this.size_=e,this.count_=e}wait(){return this.cv_.wait()}wait_for(e){return this.cv_.wait_for(e)}wait_until(e){return this.cv_.wait_until(e)}async arrive(e=1){let t=(this.count_+=e)<=this.size_;!1!==t&&(this.count_%=this.size_,await this.cv_.notify_all())}async arrive_and_wait(){await this.arrive(),await this.wait()}async arrive_and_drop(){--this.size_,await this.arrive(0)}},ConditionVariable,get Deque(){return Deque},DomainError,Entry,ErrorCategory:class{constructor(){}default_error_condition(e){return new ErrorCondition(e,this)}equivalent(...e){if(e[1]instanceof ErrorCondition){let t=e[0],r=e[1];return equal_to(this.default_error_condition(t),r)}{let t=e[0],r=e[1];return equal_to(this,t.category())&&t.value()===r}}},ErrorCode,ErrorCondition,Exception,get ForwardList(){return ForwardList},FrontInsertIterator,get HashMap(){return HashMap},get HashMultiMap(){return HashMultiMap},get HashMultiSet(){return HashMultiSet},get HashSet(){return HashSet},InsertIterator,InvalidArgument,Latch:class{constructor(e){this.cv_=new ConditionVariable,this.count_=e}async wait(){!1===this._Try_wait()&&await this.cv_.wait()}async try_wait(){return this._Try_wait()}async wait_for(e){return!0===this._Try_wait()||await this.cv_.wait_for(e)}async wait_until(e){return!0===this._Try_wait()||await this.cv_.wait_until(e)}_Try_wait(){return this.count_<=0}async count_down(e=1){this.count_-=e,!0===this._Try_wait()&&await this.cv_.notify_all()}async arrive_and_wait(e=1){await this.count_down(e),await this.wait()}},LengthError:class extends LogicError{constructor(e){super(e)}},get List(){return List},LogicError,MutableSingleton,Mutex:class{constructor(){this.mutex_=new SharedTimedMutex(this)}lock(){return this.mutex_.lock()}try_lock(){return this.mutex_.try_lock()}unlock(){return this.mutex_.unlock()}},OutOfRange,OverflowError:class extends RuntimeError{constructor(e){super(e)}},Pair,PriorityQueue,Queue:class extends AdaptorContainer{constructor(e){super(new List),void 0!==e&&this.source_.assign(e.source_.begin(),e.source_.end())}front(){return this.source_.front()}back(){return this.source_.back()}pop(){this.source_.pop_front()}},RangeError,RuntimeError,get Semaphore(){return Semaphore},get SharedLock(){return SharedLock},SharedMutex,SharedTimedMutex,Singleton,Stack:class extends AdaptorContainer{constructor(e){super(new Vector),void 0!==e&&this.source_.assign(e.source_.begin(),e.source_.end())}top(){return this.source_.back()}pop(){this.source_.pop_back()}},SystemError:class extends RuntimeError{constructor(...e){if(super(""),e.length>=2&&"number"==typeof e[0].valueOf()){let t=e[0],r=e[1];this.code_=new ErrorCode(t,r),this.message=e[2]}else this.code_=e[0],this.message=e[1]}code(){return this.code_}toJSON(){return{...super.toJSON(),code:this.code_.toJSON()}}},TimedMutex:class{constructor(){this.mutex_=new SharedTimedMutex(this)}lock(){return this.mutex_.lock()}try_lock(){return this.mutex_.try_lock()}unlock(){return this.mutex_.unlock()}try_lock_for(e){return this.mutex_.try_lock_for(e)}try_lock_until(e){return this.mutex_.try_lock_until(e)}},TimedSingleton,get TreeMap(){return TreeMap},get TreeMultiMap(){return TreeMultiMap},get TreeMultiSet(){return TreeMultiSet},get TreeSet(){return TreeSet},UnderflowError:class extends RuntimeError{constructor(e){super(e)}},get UniqueLock(){return UniqueLock},VariadicMutableSingleton:class{constructor(e,t=e=>hash(...e),r=equal){this.closure_=e,this.dict_=new HashMap(t,r)}set(...e){let t=e.slice(0,e.length-1),r=e[e.length-1];return this._Get_singleton(t).set(r)}reload(...e){return this._Get_singleton(e).reload(...e)}async clear(...e){0===e.length?this.dict_.clear():await this._Get_singleton(e).clear()}get(...e){return this._Get_singleton(e).get(...e)}is_loaded(...e){return this._Get_singleton(e).is_loaded()}_Get_singleton(e){let t=this.dict_.find(e);return!0===t.equals(this.dict_.end())&&(t=this.dict_.emplace(e,new MutableSingleton(this.closure_)).first),t.second}},VariadicSingleton:class{constructor(e,t=e=>hash(...e),r=equal){this.closure_=e,this.dict_=new HashMap(t,r)}get(...e){let t=this.dict_.find(e);return!0==t.equals(this.dict_.end())&&(t=this.dict_.emplace(e,new Singleton(this.closure_)).first),t.second.get(...e)}},VariadicTimedSingleton:class{constructor(e,t,r=e=>hash(...e),n=equal){this.interval_=e,this.closure_=t,this.dict_=new HashMap(r,n)}get(...e){let t=this.dict_.find(e);if(!0==t.equals(this.dict_.end())){let r=new TimedSingleton(this.interval_,this.closure_);t=this.dict_.emplace(e,r).first}return t.second.get(...e)}},get Vector(){return Vector},get VectorBoolean(){return VectorBoolean},accumulate:accumulate$1,adjacent_difference:adjacent_difference$1,adjacent_find:adjacent_find$1,advance,all_of:all_of$1,any_of:any_of$1,assoc_laguerre,assoc_legendre,back_inserter,base:I,begin,beta:function(e,t){return tgamma(e)*tgamma(t)/tgamma(e+t)},binary_search:binary_search$1,bit_and:function(e,t){return e&t},bit_or:function(e,t){return e|t},bit_xor:function(e,t){return e^t},clamp:function(e,t,r,n=less){return n(e,t)?t:n(r,e)?r:e},comp_ellint_1:function(e){return ellint_1(e,Math.PI/2)},comp_ellint_2:function(e){return ellint_2(e,Math.PI/2)},comp_ellint_3:function(e,t){return ellint_3(e,t,Math.PI/2)},copy:copy$1,copy_backward:copy_backward$1,copy_if:copy_if$1,copy_n:copy_n$1,count:count$1,count_if:count_if$1,cyl_bessel_i,cyl_bessel_j,cyl_bessel_k:function(e,t){if(t<=0)throw new InvalidArgument(`Error on std.cyl_bessel_k(): requires x > 0 -> (x = ${t}).`);return Math.PI/2*(cyl_bessel_i(-e,t)-cyl_bessel_i(e,t))/Math.sin(e*Math.PI)},cyl_neumann,distance,divides:function(e,t){return e.divides instanceof Function?e.divides(t):e/t},ellint_1,ellint_2,ellint_3,empty:function(e){return e instanceof Array?0!==e.length:e.empty()},end,equal:equal$1,equal_range:equal_range$1,equal_to,exclusive_scan:exclusive_scan$1,experimental:R,expint:function(e){return 0===e?-1/0:e<0?-function(e){let t=function(e){let t=20/47*Math.pow(e,Math.sqrt(31/26));return 1/(1+Math.pow(e,1.5))+O*t/(1+t)}(e),r=.5614594835668851+.43854051643311487*Math.pow(Math.E,-e/.43854051643311487);r=Math.pow(Math.E,-e)/r;let n=1+.5614594835668851/e-.43854051643311487/Math.pow(t+P*e,2);return r*(n=Math.log(n)/Math.log(Math.E))}(-e):.5772156649015329+Math.log(Math.abs(e))/Math.log(Math.E)+q.sigma(function(t){return Math.pow(e,t)/(t*q.factorial(t))},1,150)},fill:fill$1,fill_n:fill_n$1,find:find$1,find_end:find_end$1,find_first_of:find_first_of$1,find_if:find_if$1,find_if_not:find_if_not$1,for_each:for_each$1,for_each_n:for_each_n$1,front_inserter:function(e){return new FrontInsertIterator(e)},gcd,generate:generate$1,generate_n:generate_n$1,get_uid,greater:function(e,t){return!less_equal(e,t)},greater_equal:function(e,t){return!less(e,t)},hash,hermite:function(e,t){if((e=Math.floor(e))<0)throw new InvalidArgument(`Error on std.hermite(): n must be unsigned integer -> (n = ${e}).`);let r=[1,2*t];return function _Hermite(e,t,r){if(r.length>e)return r[e];let n=_Hermite(e-1,t,r),s=_Hermite(e-2,t,r),i=t*n-(e-1)*s;return i*=2,r[e]=i,i}(e,t,r)},includes:includes$1,inclusive_scan:inclusive_scan$1,inner_product:inner_product$1,inplace_merge:inplace_merge$1,inserter:function(e,t){return new InsertIterator(e,t)},iota:iota$1,is_heap:is_heap$1,is_heap_until:is_heap_until$1,is_node,is_partitioned:is_partitioned$1,is_permutation:is_permutation$1,is_sorted:is_sorted$1,is_sorted_until:is_sorted_until$1,is_unique:is_unique$1,iter_swap,laguerre:function(e,t){return assoc_laguerre(e,0,t)},lcm:function(e,t){return e*t/gcd(e,t)},legendre:function(e,t){return assoc_legendre(e,0,t)},less,less_equal,lexicographical_compare:lexicographical_compare$1,lgamma:function(e){return Math.log(tgamma(e))},lock,logical_and:function(e,t){return!!e&&!!t},logical_not:function(e){return!e},logical_or:function(e,t){return!!e||!!t},lower_bound:lower_bound$1,make_heap:make_heap$1,make_pair:function(e,t){return new Pair(e,t)},make_reverse_iterator:function(e){return e.reverse()},max:function(e,t=less){let r=e[0];for(let n=1;n<e.length;++n)t(r,e[n])&&(r=e[n]);return r},max_element:max_element$1,merge:merge$1,min:function(e,t=less){let r=e[0];for(let n=1;n<e.length;++n)t(e[n],r)&&(r=e[n]);return r},min_element:min_element$1,minmax:function(e,t=less){let r=e[0],n=e[0];for(let s=1;s<e.length;++s)t(e[s],r)&&(r=e[s]),t(n,e[s])&&(n=e[s]);return new Pair(r,n)},minmax_element:minmax_element$1,minus,mismatch:mismatch$1,modules:function(e,t){return e.modules instanceof Function?e.modules(t):e%t},multiplies,negate:function(e){return e.negate instanceof Function?e.negate():-e},next:function(e,t=1){return 1===t?e.next():advance(e,t)},next_permutation:next_permutation$1,none_of:none_of$1,not_equal_to,nth_element:nth_element$1,partial_sort:partial_sort$1,partial_sort_copy:partial_sort_copy$1,partial_sum:partial_sum$1,partition:partition$1,partition_copy:partition_copy$1,partition_point:partition_point$1,plus,pop_heap:pop_heap$1,prev:function(e,t=1){return 1===t?e.prev():advance(e,-t)},prev_permutation:prev_permutation$1,push_heap:push_heap$1,randint,ranges:L,rbegin:function(e){return e instanceof Array&&(e=Vector.wrap(e)),e.rbegin()},remove:remove$1,remove_copy:remove_copy$1,remove_copy_if:remove_copy_if$1,remove_if:remove_if$1,rend:function(e){return e instanceof Array&&(e=Vector.wrap(e)),e.rend()},replace:replace$1,replace_copy:replace_copy$1,replace_copy_if:replace_copy_if$1,replace_if:replace_if$1,reverse:reverse$1,reverse_copy:reverse_copy$1,riemann_zeta:function riemann_zeta(e){return e<0?Math.pow(2,e)*Math.pow(Math.PI,e-1)*Math.sin(Math.PI*e/2)*tgamma(1-e)*riemann_zeta(1-e):0===e?-.5:e<1?function(e){let t=q.sigma(function(t){return Math.pow(-1,t-1)*Math.pow(t,-e)},1,1e5);return t/(1-Math.pow(2,1-e))}(e):1===e?1/0:q.sigma(function(t){return Math.pow(t,-e)},1,1e5)},rotate:rotate$1,rotate_copy:rotate_copy$1,sample:sample$1,search:search$1,search_n:search_n$1,set_difference:set_difference$1,set_intersection:set_intersection$1,set_symmetric_difference:set_symmetric_difference$1,set_union:set_union$1,shift_left:shift_left$1,shift_right:shift_right$1,shuffle:shuffle$1,size,sleep_for,sleep_until,sort:sort$1,sort_heap:sort_heap$1,sph_bessel:function(e,t){return Math.sqrt(Math.PI/(2*t))*cyl_bessel_j(e+.5,t)},sph_neumann:function(e,t){return Math.sqrt(Math.PI/(2*t))*cyl_neumann(e+.5,t)},stable_partition:stable_partition$1,stable_sort:stable_sort$1,swap_ranges:swap_ranges$1,tgamma,transform:transform$1,transform_exclusive_scan:transform_exclusive_scan$1,transform_inclusive_scan:transform_inclusive_scan$1,try_lock,unique:unique$1,unique_copy:unique_copy$1,upper_bound:upper_bound$1})}}]);